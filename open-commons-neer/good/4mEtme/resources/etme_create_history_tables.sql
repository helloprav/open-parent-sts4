-- MySQL Script generated by MySQL Workbench
-- Thu Oct 22 18:47:01 2015
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema StartupMigrationEngine
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `StartupMigrationEngine` DEFAULT CHARACTER SET latin1 ;

-- -----------------------------------------------------
-- Schema new_schema1
-- -----------------------------------------------------
USE `StartupMigrationEngine`;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`SLAHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`SLAHistory` (
  `SLAHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `SLAID` INT NOT NULL,
  `SLAName` VARCHAR(100) NOT NULL,
  `RTOMinutes` INT NULL,
  `RPOMinutes` INT NULL,
  `AvailabilityPercent` FLOAT NULL,
  `CreationDate` TIMESTAMP NOT NULL,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`SLAHistoryID`),
  INDEX `fk_SLAHistory_SLAID_idx` (`SLAID` ASC),
  INDEX `fk_SLAHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_SLAHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  CONSTRAINT `fk_SLAHistory_SLAID`
    FOREIGN KEY (`SLAID`)
    REFERENCES `StartupMigrationEngine`.`SLAs` (`SLAID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SLAHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_SLAHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
 ) ENGINE = InnoDB;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_SLA_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_SLA_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_SLA_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`SLAs`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`SLAHistory` (`VersionNumber`,`SLAID`,`SLAName`,`RTOMinutes`,`RPOMinutes`,`AvailabilityPercent`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.SLAID,NEW.SLAName,NEW.RTOMinutes,NEW.RPOMinutes,NEW.AvailabilityPercent,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_SLA_UPDATE`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_SLA_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_SLA_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`SLAs`
  FOR EACH ROW 
BEGIN
  SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`SLAHistory` where SLAID = NEW.SLAID);
  INSERT INTO `StartupMigrationEngine`.`SLAHistory` (`VersionNumber`,`SLAID`,`SLAName`,`RTOMinutes`,`RPOMinutes`,`AvailabilityPercent`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.SLAID,NEW.SLAName,NEW.RTOMinutes,NEW.RPOMinutes,NEW.AvailabilityPercent,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`AssetCustomFieldHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`AssetCustomFieldHistory` (
  `AssetCustomFieldHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `AssetCustomFieldID` INT NOT NULL,
  `AssetTableName` VARCHAR(100) NOT NULL,
  `EnableCustomField` VARCHAR(100) NULL,
  `CustomFieldName1` VARCHAR(100) NULL,
  `CustomFieldName2` VARCHAR(100) NULL,
  `CustomFieldName3` VARCHAR(100) NULL,
  `CreationDate` TIMESTAMP NOT NULL,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`AssetCustomFieldHistoryID`),
  INDEX `fk_AssetCustomFieldHistory_AssetCustomFieldID_idx` (`AssetCustomFieldID` ASC),
  INDEX `fk_AssetCustomFieldHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_AssetCustomFieldHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  CONSTRAINT `fk_AssetCustomFieldHistory_AssetCustomFieldID`
    FOREIGN KEY (`AssetCustomFieldID`)
    REFERENCES `StartupMigrationEngine`.`AssetCustomFields` (`AssetCustomFieldID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_AssetCustomFieldHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_AssetCustomFieldHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
 ) ENGINE = InnoDB;
 
-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_AssetCustomField_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_AssetCustomField_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_AssetCustomField_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`AssetCustomFields`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`AssetCustomFieldHistory` (`VersionNumber`,`AssetCustomFieldID`,`AssetTableName`,`EnableCustomField`,`customFieldName1`,`customFieldName2`,`customFieldName3`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.AssetCustomFieldID,NEW.AssetTableName,NEW.EnableCustomField,NEW.CustomFieldName1,NEW.CustomFieldName2,NEW.CustomFieldName3,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_AssetCustomField_UPDATE`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_AssetCustomField_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_AssetCustomField_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`AssetCustomFields`
  FOR EACH ROW 
BEGIN
  SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`AssetCustomFieldHistory` where AssetCustomFieldID = NEW.AssetCustomFieldID);
  INSERT INTO `StartupMigrationEngine`.`AssetCustomFieldHistory` (`VersionNumber`,`AssetCustomFieldID`,`AssetTableName`,`EnableCustomField`,`customFieldName1`,`customFieldName2`,`customFieldName3`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.AssetCustomFieldID,NEW.AssetTableName,NEW.EnableCustomField,NEW.customFieldName1,NEW.customFieldName2,NEW.customFieldName3,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`BuildingHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`BuildingHistory` (
  `BuildingHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `BuildingID` INT NOT NULL,
  `BuildingName` VARCHAR(100) NOT NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL ,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`BuildingHistoryID`),
  INDEX `fk_BuildingHistory_BuildingID_idx` (`BuildingID` ASC),
  INDEX `fk_BuildingHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_BuildingHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_BuildingHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  CONSTRAINT `fk_BuildingHistory_BuildingID`
    FOREIGN KEY (`BuildingID`)
    REFERENCES `StartupMigrationEngine`.`Buildings` (`BuildingID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_BuildingHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_BuildingHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_BuildingHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION
 ) ENGINE = InnoDB;

 -- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_Building_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_Building_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_Building_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`Buildings`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`BuildingHistory` (`VersionNumber`,`BuildingID`,`BuildingName`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.BuildingID,NEW.BuildingName,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_Building_UPDATE`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_Building_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_Building_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`Buildings`
  FOR EACH ROW 
BEGIN
  SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`BuildingHistory` where BuildingID = NEW.BuildingID);
  INSERT INTO `StartupMigrationEngine`.`BuildingHistory` (`VersionNumber`,`BuildingID`,`BuildingName`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.BuildingID,NEW.BuildingName,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`FloorHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`FloorHistory` (
  `FloorHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `FloorID` INT NOT NULL,
  `FloorName` VARCHAR(100) NOT NULL,
  `BuildingID` INT NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL ,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`FloorHistoryID`),
  INDEX `fk_FloorHistory_FloorID_idx` (`FloorID` ASC),
  INDEX `fk_FloorHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_FloorHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_FloorHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  CONSTRAINT `fk_FloorHistory_FloorID`
    FOREIGN KEY (`FloorID`)
    REFERENCES `StartupMigrationEngine`.`Floors` (`FloorID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_FloorHistory_Buildings`
    FOREIGN KEY (`BuildingID`)
    REFERENCES `StartupMigrationEngine`.`Buildings` (`BuildingID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,  
  CONSTRAINT `fk_FloorHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_FloorHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_FloorHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION
 ) ENGINE = InnoDB;
 
-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_Floor_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_Floor_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_Floor_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`Floors`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`FloorHistory` (`VersionNumber`,`FloorID`,`FloorName`,`BuildingID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.FloorID,NEW.FloorName,NEW.BuildingID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_Floor_UPDATE`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_Floor_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_Floor_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`Floors`
  FOR EACH ROW 
BEGIN
  SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`FloorHistory` where FloorID = NEW.FloorID);
  INSERT INTO `StartupMigrationEngine`.`FloorHistory` (`VersionNumber`,`FloorID`,`FloorName`,`BuildingID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.FloorID,NEW.FloorName,NEW.BuildingID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`RoomHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`RoomHistory` (
  `RoomHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `RoomID` INT NOT NULL,
  `RoomName` VARCHAR(100) NOT NULL,
  `FloorID` INT NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL ,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`RoomHistoryID`),
  INDEX `fk_RoomHistory_RoomID_idx` (`RoomID` ASC),
  INDEX `fk_RoomHistory_Floors_idx` (`FloorID` ASC),
  INDEX `fk_RoomHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_RoomHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_RoomHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  CONSTRAINT `fk_RoomHistory_RoomID`
    FOREIGN KEY (`RoomID`)
    REFERENCES `StartupMigrationEngine`.`Rooms` (`RoomID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_RoomHistory_Floors`
    FOREIGN KEY (`FloorID`)
    REFERENCES `StartupMigrationEngine`.`Floors` (`FloorID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,  
  CONSTRAINT `fk_RoomHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_RoomHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_RoomHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION
 ) ENGINE = InnoDB;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_Room_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_Room_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_Room_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`Rooms`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`RoomHistory` (`VersionNumber`,`RoomID`,`RoomName`,`FloorID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.RoomID,NEW.RoomName,NEW.FloorID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_Room_UPDATE`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_Room_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_Room_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`Rooms`
  FOR EACH ROW 
BEGIN
  SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`RoomHistory` where RoomID = NEW.RoomID);
  INSERT INTO `StartupMigrationEngine`.`RoomHistory` (`VersionNumber`,`RoomID`,`RoomName`,`FloorID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.RoomID,NEW.RoomName,NEW.FloorID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`FloorLocationHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`FloorLocationHistory` (
  `FloorLocationHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `FloorLocationID` INT NOT NULL,
  `FloorLocationName` VARCHAR(100) NOT NULL,
  `RoomID` INT NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL ,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`FloorLocationHistoryID`),
  INDEX `fk_FloorLocationHistory_FloorLocationID_idx` (`FloorLocationID` ASC),
  INDEX `fk_FloorLocationHistory_RoomID_idx` (`RoomID` ASC),
  INDEX `fk_FloorLocationHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_FloorLocationHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_FloorLocationHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  CONSTRAINT `fk_FloorLocationHistory_FloorLocationID`
    FOREIGN KEY (`FloorLocationID`)
    REFERENCES `StartupMigrationEngine`.`FloorLocations` (`FloorLocationID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_FloorLocationHistory_Rooms`
    FOREIGN KEY (`RoomID`)
    REFERENCES `StartupMigrationEngine`.`Rooms` (`RoomID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION, 
  CONSTRAINT `fk_FloorLocationHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_FloorLocationHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_FloorLocationHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION
 ) ENGINE = InnoDB;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_FloorLocation_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_FloorLocation_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_FloorLocation_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`FloorLocations`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`FloorLocationHistory` (`VersionNumber`,`FloorLocationID`,`FloorLocationName`,`RoomID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.FloorLocationID,NEW.FloorLocationName,NEW.RoomID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_FloorLocation_UPDATE`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_FloorLocation_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_FloorLocation_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`FloorLocations`
  FOR EACH ROW 
BEGIN
  SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`FloorLocationHistory` where FloorLocationID = NEW.FloorLocationID);
  INSERT INTO `StartupMigrationEngine`.`FloorLocationHistory` (`VersionNumber`,`FloorLocationID`,`FloorLocationName`,`RoomID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.FloorLocationID,NEW.FloorLocationName,NEW.RoomID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`RackHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`RackHistory` (
  `RackHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `RackID` INT NOT NULL,
  `RackIdentifier` VARCHAR(200) NOT NULL,
  `FloorLocationID` INT NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL ,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`RackHistoryID`),
  INDEX `fk_RackHistory_RackID_idx` (`RackID` ASC),
  INDEX `fk_RackHistory_FloorLocations_idx` (`FloorLocationID` ASC),
  INDEX `fk_RackHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_RackHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_RackHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  CONSTRAINT `fk_RackHistory_RackID`
    FOREIGN KEY (`RackID`)
    REFERENCES `StartupMigrationEngine`.`Racks` (`RackID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_RackHistory_FloorLocations`
    FOREIGN KEY (`FloorLocationID`)
    REFERENCES `StartupMigrationEngine`.`FloorLocations` (`FloorLocationID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION, 
  CONSTRAINT `fk_RackHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_RackHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_RackHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION
 ) ENGINE = InnoDB;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_Rack_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_Rack_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_Rack_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`Racks`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`RackHistory` (`VersionNumber`,`RackID`,`RackIdentifier`,`FloorLocationID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.RackID,NEW.RackIdentifier,NEW.FloorLocationID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_Rack_UPDATE`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_Rack_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_Rack_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`Racks`
  FOR EACH ROW 
BEGIN
  SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`RackHistory` where RackID = NEW.RackID);
  INSERT INTO `StartupMigrationEngine`.`RackHistory` (`VersionNumber`,`RackID`,`RackIdentifier`,`FloorLocationID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.RackID,NEW.RackIdentifier,NEW.FloorLocationID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`BladeChassisHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`BladeChassisHistory` (
  `BladeChassisHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `BladeChassisID` INT NOT NULL,
  `BladeChassisIdentifier` VARCHAR(200) NOT NULL,
  `RackID` INT NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL ,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`BladeChassisHistoryID`),
  INDEX `fk_BladeChassisHistory_BladeChassisID_idx` (`BladeChassisID` ASC),
  INDEX `fk_BladeChassisHistory_Racks_idx` (`RackID` ASC),
  INDEX `fk_BladeChassisHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_BladeChassisHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_BladeChassisHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  CONSTRAINT `fk_BladeChassisHistory_BladeChassisID`
    FOREIGN KEY (`BladeChassisID`)
    REFERENCES `StartupMigrationEngine`.`BladeChassis` (`BladeChassisID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_BladeChassisHistory_Racks`
    FOREIGN KEY (`RackID`)
    REFERENCES `StartupMigrationEngine`.`Racks` (`RackID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION, 
  CONSTRAINT `fk_BladeChassisHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_BladeChassisHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_BladeChassisHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION
 ) ENGINE = InnoDB;
 
-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_BladeChassis_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_BladeChassis_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_BladeChassis_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`BladeChassis`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`BladeChassisHistory` (`VersionNumber`,`BladeChassisID`,`BladeChassisIdentifier`,`RackID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.BladeChassisID,NEW.BladeChassisIdentifier,NEW.RackID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_BladeChassis_UPDATE`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_BladeChassis_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_BladeChassis_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`BladeChassis`
  FOR EACH ROW 
BEGIN
  SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`BladeChassisHistory` where BladeChassisID = NEW.BladeChassisID);
  INSERT INTO `StartupMigrationEngine`.`BladeChassisHistory` (`VersionNumber`,`BladeChassisID`,`BladeChassisIdentifier`,`RackID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.BladeChassisID,NEW.BladeChassisIdentifier,NEW.RackID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`ServerClusterHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`ServerClusterHistory` (
  `ServerClusterHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `ServerClusterID` INT NOT NULL,
  `ServerClusterIdentifier` VARCHAR(200) NOT NULL,
  `ServerClusterTypeID` INT NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`ServerClusterHistoryID`),
  INDEX `fk_ServerClusterHistory_ServerClusterID_idx` (`ServerClusterID` ASC),
  INDEX `fk_ServerClusterHistory_ServerClusterTypes1_idx` (`ServerClusterTypeID` ASC),
  INDEX `fk_ServerClusterHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_ServerClusterHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_ServerClusterHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  CONSTRAINT `fk_ServerClusterHistory_ServerClusterID`
    FOREIGN KEY (`ServerClusterID`)
    REFERENCES `StartupMigrationEngine`.`ServerClusters` (`ServerClusterID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerClusterHistory_ServerClusterTypes1`
    FOREIGN KEY (`ServerClusterTypeID`)
    REFERENCES `StartupMigrationEngine`.`ServerClusterTypes` (`ServerClusterTypeID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION, 
  CONSTRAINT `fk_ServerClusterHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_ServerClusterHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerClusterHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION
 ) ENGINE = InnoDB;
 
-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ServerCluster_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ServerCluster_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ServerCluster_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`ServerClusters`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`ServerClusterHistory` (`VersionNumber`,`ServerClusterID`,`ServerClusterIdentifier`,`ServerClusterTypeID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.ServerClusterID,NEW.ServerClusterIdentifier,NEW.ServerClusterTypeID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ServerCluster_UPDATE`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ServerCluster_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ServerCluster_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`ServerClusters`
  FOR EACH ROW 
BEGIN
  SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`ServerClusterHistory` where ServerClusterID = NEW.ServerClusterID);
  INSERT INTO `StartupMigrationEngine`.`ServerClusterHistory` (`VersionNumber`,`ServerClusterID`,`ServerClusterIdentifier`,`ServerClusterTypeID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.ServerClusterID,NEW.ServerClusterIdentifier,NEW.ServerClusterTypeID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`ServersInServerClusterHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`ServersInServerClusterHistory` (
  `ServersInServerClusterHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `ServersInServerClusterID` INT NOT NULL,
  `ServerID` INT NOT NULL,
  `ServerClusterID` INT NOT NULL,
  `TemplateUploadID` INT NULL,
  `CreationDate` TIMESTAMP NOT NULL,
  `CreatedByUserID` INT NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT NOT NULL,
  PRIMARY KEY (`ServersInServerClusterHistoryID`),
  INDEX `fk_ServersInServerClusterHistory_ServersInServerClusterID_idx` (`ServersInServerClusterID` ASC),
  INDEX `fk_ServersInServerClusterHistory_Servers1_idx` (`ServerID` ASC),
  INDEX `fk_ServersInServerClusterHistory_ServerClusters1_idx` (`ServerClusterID` ASC),
  INDEX `fk_ServersInServerClusterHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_ServersInServerClusterHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_ServersInServerClusterHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  CONSTRAINT `fk_ServersInServerClusterHistory_ServersInServerClusterID`
    FOREIGN KEY (`ServersInServerClusterID`)
    REFERENCES `StartupMigrationEngine`.`ServersInServerClusters` (`ServersInServerClusterID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServersInServerClusterHistory_Servers1`
    FOREIGN KEY (`ServerID`)
    REFERENCES `StartupMigrationEngine`.`Servers` (`ServerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServersInServerClusterHistory_ServerClusters1`
    FOREIGN KEY (`ServerClusterID`)
    REFERENCES `StartupMigrationEngine`.`ServerClusters` (`ServerClusterID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION, 
  CONSTRAINT `fk_ServersInServerClusterHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_ServersInServerClusterHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServersInServerClusterHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION
 ) ENGINE = InnoDB;
  
-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ServersInServerClusters_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ServersInServerClusters_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ServersInServerClusters_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`ServersInServerClusters`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`ServersInServerClusterHistory` (`VersionNumber`,`ServersInServerClusterID`,`ServerID`,`ServerClusterID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.ServersInServerClusterID,NEW.ServerID,NEW.ServerClusterID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ServersInServerClusters_UPDATE`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ServersInServerClusters_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ServersInServerClusters_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`ServersInServerClusters`
  FOR EACH ROW 
BEGIN
  SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`ServersInServerClusterHistory` where ServersInServerClusterID = NEW.ServersInServerClusterID);
  INSERT INTO `StartupMigrationEngine`.`ServersInServerClusterHistory` (`VersionNumber`,`ServersInServerClusterID`,`ServerID`,`ServerClusterID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.ServersInServerClusterID,NEW.ServerID,NEW.ServerClusterID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`ServerClusterLunsHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`ServerClusterLunsHistory` (
  `ServerClusterLunHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `ServerClusterLUNID` INT NOT NULL,
  `ServerClusterID` INT NOT NULL,
  `LocalName` VARCHAR(200) NOT NULL,
  `SANLUNID` INT NOT NULL,
  `StorageServiceID` INT NULL,
  `AvailableGB` INT NULL,
  `UsedGB` INT NULL,
  `TemplateUploadID` INT NULL,
  `CreationDate` TIMESTAMP NOT NULL,
  `CreatedByUserID` INT NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT NOT NULL,
  PRIMARY KEY (`ServerClusterLunHistoryID`),
  INDEX `fk_ServerClusterLunsHistory_ServerClusterLUNID_idx` (`ServerClusterLunHistoryID` ASC),
  INDEX `fk_ServerClusterLunsHistory_ServerClusters_idx` (`ServerClusterID` ASC),
  INDEX `fk_ServerClusterLunsHistory_SANLUNs1_idx` (`SANLUNID` ASC),
  INDEX `fk_ServerClusterLunsHistory_StorageServices_idx` (`StorageServiceID` ASC),
  INDEX `fk_ServerClusterLunsHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_ServerClusterLunsHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_ServerClusterLunsHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  CONSTRAINT `fk_ServerClusterLunsHistory_ServerClusterLUNID`
    FOREIGN KEY (`ServerClusterLUNID`)
    REFERENCES `StartupMigrationEngine`.`ServerClusterLUNs` (`ServerClusterLUNID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerClusterLunsHistory_ServerClusters`
    FOREIGN KEY (`ServerClusterID`)
    REFERENCES `StartupMigrationEngine`.`ServerClusters` (`ServerClusterID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerClusterLunsHistory_SANLUNs1`
    FOREIGN KEY (`SANLUNID`)
    REFERENCES `StartupMigrationEngine`.`SANLUNs` (`SANLUNID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerClusterLunsHistory_StorageServices`
    FOREIGN KEY (`StorageServiceID`)
    REFERENCES `StartupMigrationEngine`.`StorageServices` (`StorageServiceID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION, 
  CONSTRAINT `fk_ServerClusterLunsHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_ServerClusterLunsHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerClusterLunsHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION
 ) ENGINE = InnoDB;
 
-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ServerClusterLUNs_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ServerClusterLUNs_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ServerClusterLUNs_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`ServerClusterLUNs`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`ServerClusterLunsHistory` (`VersionNumber`,`ServerClusterLUNID`,`ServerClusterID`,`LocalName`,`SANLUNID`,`StorageServiceID`,`UsedGB`,`AvailableGB`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.ServerClusterLUNID,NEW.ServerClusterID,NEW.LocalName,NEW.SANLUNID,NEW.StorageServiceID,NEW.AvailableGB,NEW.UsedGB,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ServerClusterLUNs_UPDATE`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ServerClusterLUNs_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ServerClusterLUNs_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`ServerClusterLUNs`
  FOR EACH ROW 
BEGIN
  SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`ServerClusterLunsHistory` where ServerClusterLUNID = NEW.ServerClusterLUNID);
  INSERT INTO `StartupMigrationEngine`.`ServerClusterLunsHistory` (`VersionNumber`,`ServerClusterLUNID`,`ServerClusterID`,`LocalName`,`SANLUNID`,`StorageServiceID`,`UsedGB`,`AvailableGB`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.ServerClusterLUNID,NEW.ServerClusterID,NEW.LocalName,NEW.SANLUNID,NEW.StorageServiceID,NEW.AvailableGB,NEW.UsedGB,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`ServerNICHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`ServerNICHistory` (
  `ServerNICHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `ServerNICID` INT NOT NULL,
  `ServerID` INT NOT NULL,
  `IPAddress` VARCHAR(100) NOT NULL,
  `TemplateUploadID` INT NULL,
  `CreationDate` TIMESTAMP NOT NULL,
  `CreatedByUserID` INT NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT NOT NULL,
  PRIMARY KEY (`ServerNICHistoryID`),
  INDEX `fk_ServerNICHistory_ServerNICID_idx` (`ServerNICID` ASC),
  INDEX `fk_ServerNICHistory_Servers1_idx` (`ServerID` ASC),
  INDEX `fk_ServerNICHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_ServerNICHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_ServerNICHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  CONSTRAINT `fk_ServerNICHistory_ServerNICID`
    FOREIGN KEY (`ServerNICID`)
    REFERENCES `StartupMigrationEngine`.`ServerNICs` (`ServerNICID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerNICHistory_Servers1`
    FOREIGN KEY (`ServerID`)
    REFERENCES `StartupMigrationEngine`.`Servers` (`ServerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerNICHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_ServerNICHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerNICHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION
 ) ENGINE = InnoDB;
 
-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ServerNICs_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ServerNICs_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ServerNICs_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`ServerNICs`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`ServerNICHistory` (`VersionNumber`,`ServerNICID`,`ServerID`,`IPAddress`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.ServerNICID,NEW.ServerID,NEW.IPAddress,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ServerNICs_UPDATE`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ServerNICs_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ServerNICs_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`ServerNICs`
  FOR EACH ROW 
BEGIN
  SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`ServerNICHistory` where ServerNICID = NEW.ServerNICID);
  INSERT INTO `StartupMigrationEngine`.`ServerNICHistory` (`VersionNumber`,`ServerNICID`,`ServerID`,`IPAddress`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.ServerNICID,NEW.ServerID,NEW.IPAddress,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`ServerDASHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`ServerDASHistory` (
  `ServerDASHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `ServerDASID` INT NOT NULL,
  `ServerID` INT NOT NULL,
  `DASReference` VARCHAR(200) NOT NULL,
  `AvailableGB` INT NULL,
  `UsedGB` INT NULL,
  `TemplateUploadID` INT NULL,
  `CreationDate` TIMESTAMP NOT NULL,
  `CreatedByUserID` INT NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT NOT NULL,
  PRIMARY KEY (`ServerDASHistoryID`),
  INDEX `fk_ServerDASHistory_ServerDASID_idx` (`ServerDASID` ASC),
  INDEX `fk_ServerDASHistory_Servers_idx` (`ServerID` ASC),
  INDEX `fk_ServerDASHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_ServerDASHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_ServerDASHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  CONSTRAINT `fk_ServerDASHistory_ServerDASID`
    FOREIGN KEY (`ServerDASID`)
    REFERENCES `StartupMigrationEngine`.`ServerDAS` (`ServerDASID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerDASHistory_Servers1`
    FOREIGN KEY (`ServerID`)
    REFERENCES `StartupMigrationEngine`.`Servers` (`ServerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerDASHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_ServerDASHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerDASHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION
 ) ENGINE = InnoDB;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ServerDAS_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ServerDAS_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ServerDAS_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`ServerDAS`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`ServerDASHistory` (`VersionNumber`,`ServerDASID`,`ServerID`,`DASReference`,`AvailableGB`,`UsedGB`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.ServerDASID,NEW.ServerID,NEW.DASReference,NEW.AvailableGB,NEW.UsedGB,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ServerDAS_UPDATE`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ServerDAS_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ServerDAS_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`ServerDAS`
  FOR EACH ROW 
BEGIN
  SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`ServerDASHistory` where ServerDASID = NEW.ServerDASID);
  INSERT INTO `StartupMigrationEngine`.`ServerDASHistory` (`VersionNumber`,`ServerDASID`,`ServerID`,`DASReference`,`AvailableGB`,`UsedGB`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.ServerDASID,NEW.ServerID,NEW.DASReference,NEW.AvailableGB,NEW.UsedGB,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`ServerSharesHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`ServerSharesHistory` (
  `ServerShareHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `ServerShareID` INT NOT NULL,
  `ServerID` INT NOT NULL,
  `ShareName` VARCHAR(200) NOT NULL,
  `LocalPath` VARCHAR(200) NULL,
  `AvailableGB` INT NULL,
  `UsedGB` INT NULL,
  `TemplateUploadID` INT NULL,
  `CreationDate` TIMESTAMP NOT NULL,
  `CreatedByUserID` INT NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT NOT NULL,
  PRIMARY KEY (`ServerShareHistoryID`),
  INDEX `fk_ServerSharesHistory_ServerShareID_idx` (`ServerShareID` ASC),
  INDEX `fk_ServerSharesHistory_Servers1_idx` (`ServerID` ASC),
  INDEX `fk_ServerSharesHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_ServerSharesHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_ServerSharesHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  CONSTRAINT `fk_ServerSharesHistory_ServerShareID`
    FOREIGN KEY (`ServerShareID`)
    REFERENCES `StartupMigrationEngine`.`ServerShares` (`ServerShareID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerSharesHistory_Servers1`
    FOREIGN KEY (`ServerID`)
    REFERENCES `StartupMigrationEngine`.`Servers` (`ServerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerSharesHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_ServerSharesHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerSharesHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION
 ) ENGINE = InnoDB;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ServerShares_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ServerShares_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ServerShares_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`ServerShares`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`ServerSharesHistory` (`VersionNumber`,`ServerShareID`,`ServerID`,`ShareName`,`LocalPath`,`AvailableGB`,`UsedGB`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.ServerShareID,NEW.ServerID,NEW.ShareName,NEW.LocalPath,NEW.AvailableGB,NEW.UsedGB,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ServerShares_UPDATE`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ServerShares_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ServerShares_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`ServerShares`
  FOR EACH ROW 
BEGIN
  SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`ServerSharesHistory` where ServerShareID = NEW.ServerShareID);
  INSERT INTO `StartupMigrationEngine`.`ServerSharesHistory` (`VersionNumber`,`ServerShareID`,`ServerID`,`ShareName`,`LocalPath`,`AvailableGB`,`UsedGB`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.ServerShareID,NEW.ServerID,NEW.ShareName,NEW.LocalPath,NEW.AvailableGB,NEW.UsedGB,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`ServerShareMountHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`ServerShareMountHistory` (
  `ServerShareMountHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `ServerShareMountID` INT NOT NULL,
  `ServerID` INT NOT NULL,
  `LocalMount` VARCHAR(200) NULL,
  `ServerShareID` INT NULL,
  `NASShareID` INT NULL,
  `TemplateUploadID` INT NULL,
  `CreationDate` TIMESTAMP NOT NULL,
  `CreatedByUserID` INT NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT NOT NULL,
  PRIMARY KEY (`ServerShareMountHistoryID`),
  INDEX `fk_ServerShareMountHistory_ServerShareMountID_idx` (`ServerShareMountID` ASC),
  INDEX `fk_ServerShareMountHistory_Servers1_idx` (`ServerID` ASC),
  INDEX `fk_ServerShareMountHistory_ServerShares1_idx` (`ServerShareID` ASC),
  INDEX `fk_ServerShareMountHistory_NASShares1_idx` (`NASShareID` ASC),
  INDEX `fk_ServerShareMountHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_ServerShareMountHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_ServerShareMountHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  CONSTRAINT `fk_ServerShareMountHistory_ServerShareMountID`
    FOREIGN KEY (`ServerShareMountID`)
    REFERENCES `StartupMigrationEngine`.`ServerShareMounts` (`ServerShareMountID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerShareMountHistory_Servers1`
    FOREIGN KEY (`ServerID`)
    REFERENCES `StartupMigrationEngine`.`Servers` (`ServerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerShareMountHistory_ServerShares1`
    FOREIGN KEY (`ServerShareID`)
    REFERENCES `StartupMigrationEngine`.`ServerShares` (`ServerShareID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerShareMountHistory_NASShares1`
    FOREIGN KEY (`NASShareID`)
    REFERENCES `StartupMigrationEngine`.`NASShares` (`NASShareID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerShareMountHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_ServerShareMountHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerShareMountHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION
 ) ENGINE = InnoDB;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ServerShareMounts_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ServerShareMounts_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ServerShareMounts_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`ServerShareMounts`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`ServerShareMountHistory` (`VersionNumber`,`ServerShareMountID`,`ServerID`,`LocalMount`,`ServerShareID`,`NASShareID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.ServerShareMountID,NEW.ServerID,NEW.LocalMount,NEW.ServerShareID,NEW.NASShareID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ServerShareMounts_UPDATE`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ServerShareMounts_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ServerShareMounts_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`ServerShareMounts`
  FOR EACH ROW 
BEGIN
  SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`ServerShareMountHistory` where ServerShareMountID = NEW.ServerShareMountID);
  INSERT INTO `StartupMigrationEngine`.`ServerShareMountHistory` (`VersionNumber`,`ServerShareMountID`,`ServerID`,`LocalMount`,`ServerShareID`,`NASShareID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.ServerShareMountID,NEW.ServerID,NEW.LocalMount,NEW.ServerShareID,NEW.NASShareID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`ServerSANConnectionsHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`ServerSANConnectionsHistory` (
  `ServerSANConnectionHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `ServerSANConnectionID` INT NOT NULL,
  `ServerID` INT NOT NULL,
  `LocalName` VARCHAR(200) NOT NULL,
  `SANLUNID` INT NOT NULL,
  `StorageServiceID` INT NULL,
  `AvailableGB` INT NULL,
  `UsedGB` INT NULL,
  `TemplateUploadID` INT NULL,
  `CreationDate` TIMESTAMP NOT NULL,
  `CreatedByUserID` INT NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT NOT NULL,
  PRIMARY KEY (`ServerSANConnectionHistoryID`),
  INDEX `fk_ServerSANConnectionsHistory_ServerSANConnectionHistoryID_idx` (`ServerSANConnectionHistoryID` ASC),
  INDEX `fk_ServerSANConnectionsHistory_ServerSANConnectionID_idx` (`ServerSANConnectionID` ASC),
  INDEX `fk_ServerSANConnectionsHistory_Servers1_idx` (`ServerID` ASC),
  INDEX `fk_ServerSANConnectionsHistory_SANLUNs1_idx` (`SANLUNID` ASC),
  INDEX `fk_ServerSANConnectionsHistory_StorageServices_idx` (`StorageServiceID` ASC),
  INDEX `fk_ServerSANConnectionsHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_ServerSANConnectionsHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_ServerSANConnectionsHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  CONSTRAINT `fk_ServerSANConnectionsHistory_ServerSANConnectionID`
    FOREIGN KEY (`ServerSANConnectionID`)
    REFERENCES `StartupMigrationEngine`.`ServerSANConnections` (`ServerSANConnectionID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerSANConnectionsHistory_Servers1`
    FOREIGN KEY (`ServerID`)
    REFERENCES `StartupMigrationEngine`.`Servers` (`ServerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerSANConnectionsHistory_SANLUNs1`
    FOREIGN KEY (`SANLUNID`)
    REFERENCES `StartupMigrationEngine`.`SANLUNs` (`SANLUNID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerSANConnectionsHistory_StorageServices`
    FOREIGN KEY (`StorageServiceID`)
    REFERENCES `StartupMigrationEngine`.`StorageServices` (`StorageServiceID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerSANConnectionsHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_ServerSANConnectionsHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerSANConnectionsHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION
 ) ENGINE = InnoDB;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ServerSANConnections_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ServerSANConnections_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ServerSANConnections_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`ServerSANConnections`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`ServerSANConnectionsHistory` (`VersionNumber`,`ServerSANConnectionID`,`ServerID`,`LocalName`,`SANLUNID`,`StorageServiceID`,`AvailableGB`,`UsedGB`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.ServerSANConnectionID,NEW.ServerID,NEW.LocalName,NEW.SANLUNID,NEW.StorageServiceID,NEW.AvailableGB,NEW.UsedGB,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ServerSANConnections_UPDATE`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ServerSANConnections_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ServerSANConnections_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`ServerSANConnections`
  FOR EACH ROW 
BEGIN
  SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`ServerSANConnectionsHistory` where ServerSANConnectionID = NEW.ServerSANConnectionID);
  INSERT INTO `StartupMigrationEngine`.`ServerSANConnectionsHistory` (`VersionNumber`,`ServerSANConnectionID`,`ServerID`,`LocalName`,`SANLUNID`,`StorageServiceID`,`AvailableGB`,`UsedGB`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.ServerSANConnectionID,NEW.ServerID,NEW.LocalName,NEW.SANLUNID,NEW.StorageServiceID,NEW.AvailableGB,NEW.UsedGB,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`ApplicationHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`ApplicationHistory` (
  `ApplicationHistoryID` INT(11) NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `ApplicationID` INT(11) NOT NULL,
  `ApplicationName` VARCHAR(200) NOT NULL,
  `DiscoveryStateID` INT NULL,
  `MigrationScopeID` INT NULL,
  `BusinessServiceID` INT(11) NULL,
  `BusinessOwnerID` INT NULL,
  `TechnicalOwnerID` INT NULL,
  `BusinessUseDescription` VARCHAR(2000) NULL,
  `DesignDocumentationLink` VARCHAR(500) NULL,
  `MigrationComplexityID` INT NULL,
  `BusinessCriticalityID` INT NULL,
  `CurrentSLAID` INT NULL,
  `TargetSLAID` INT NULL,
  `CurrentDispositionID` INT NULL,
  `TargetDisposition` VARCHAR(100) NULL,
  `MoveGroupID` INT NULL,
  `Notes` LONGTEXT NULL,
  `CustomField1` VARCHAR(200) NULL,
  `CustomField2` VARCHAR(200) NULL,
  `CustomField3` VARCHAR(200) NULL,
  `ChangeControlDecisionID` INT NULL,
  `ChangeControlNumber` VARCHAR(200) NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`ApplicationHistoryID`),
  INDEX `fk_ApplicationHistory_BusinessServices_idx` (`BusinessServiceID` ASC),
  INDEX `fk_ApplicationHistory_BusinessOwner_idx` (`BusinessOwnerID` ASC),
  INDEX `fk_ApplicationHistory_TechnicalOwner_idx` (`TechnicalOwnerID` ASC),
  INDEX `fk_ApplicationHistory_MigrationComplexities1_idx` (`MigrationComplexityID` ASC),
  INDEX `fk_ApplicationHistory_SLAs1_idx` (`CurrentSLAID` ASC),
  INDEX `fk_ApplicationHistory_Dispositions1_idx` (`CurrentDispositionID` ASC),
  INDEX `fk_ApplicationHistory_Dispositions2_idx` (`TargetDisposition` ASC),
  INDEX `fk_ApplicationHistory_DiscoveryState1_idx` (`DiscoveryStateID` ASC),
  INDEX `fk_ApplicationHistory_MoveGroups1_idx` (`MoveGroupID` ASC),
  INDEX `fk_ApplicationHistory_MigrationScopes1_idx` (`MigrationScopeID` ASC),
  INDEX `fk_ApplicationHistory_SLAs2_idx` (`TargetSLAID` ASC),
  INDEX `fk_ApplicationHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_ApplicationHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_ApplicationHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_ApplicationHistory_BusinessCriticality_idx` (`BusinessCriticalityID` ASC),
  INDEX `fk_ApplicationHistory_ChangeControlDecisions_idx` (`ChangeControlDecisionID` ASC),
  INDEX `fk_ApplicationHistory_Applications3_idx` (`ApplicationID` ASC),
 CONSTRAINT `fk_ApplicationHistory_Applications3`
    FOREIGN KEY (`ApplicationID`)
    REFERENCES `StartupMigrationEngine`.`Applications` (`ApplicationID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationHistory_Applications1`
    FOREIGN KEY (`BusinessCriticalityID`)
    REFERENCES `StartupMigrationEngine`.`BusinessCriticality` (`BusinessCriticalityID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
   CONSTRAINT `fk_ApplicationHistory_Applications2`
    FOREIGN KEY (`ChangeControlDecisionID`)
    REFERENCES `StartupMigrationEngine`.`ChangeControlDecisions` (`ChangeControlDecisionID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationHistory_BusinessServices`
    FOREIGN KEY (`BusinessServiceID`)
    REFERENCES `StartupMigrationEngine`.`BusinessServices` (`BusinessServiceID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationHistory_BusinessOwner`
    FOREIGN KEY (`BusinessOwnerID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationHistory_TechnicalOwner`
    FOREIGN KEY (`TechnicalOwnerID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationHistory_MigrationComplexities1`
    FOREIGN KEY (`MigrationComplexityID`)
    REFERENCES `StartupMigrationEngine`.`MigrationComplexities` (`MigrationComplexityID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationHistory_SLAs1`
    FOREIGN KEY (`CurrentSLAID`)
    REFERENCES `StartupMigrationEngine`.`SLAs` (`SLAID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationHistory_Dispositions1`
    FOREIGN KEY (`CurrentDispositionID`)
    REFERENCES `StartupMigrationEngine`.`Dispositions` (`DispositionID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationHistory_DiscoveryState1`
    FOREIGN KEY (`DiscoveryStateID`)
    REFERENCES `StartupMigrationEngine`.`DiscoveryState` (`DiscoveryStateID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationHistory_MoveGroups1`
    FOREIGN KEY (`MoveGroupID`)
    REFERENCES `StartupMigrationEngine`.`MoveGroups` (`MoveGroupID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationHistory_MigrationScopes1`
    FOREIGN KEY (`MigrationScopeID`)
    REFERENCES `StartupMigrationEngine`.`MigrationScopes` (`MigrationScopeID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationHistory_SLAs2`
    FOREIGN KEY (`TargetSLAID`)
    REFERENCES `StartupMigrationEngine`.`SLAs` (`SLAID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
 CONSTRAINT `fk_ApplicationHistory_CreatedByUser`
  FOREIGN KEY (`CreatedByUserID`)
  REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION,	
 CONSTRAINT `fk_ApplicationHistory_LastUpdatedByUser`
  FOREIGN KEY (`LastUpdatedByUserID`)
  REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION,
 CONSTRAINT `fk_ApplicationHistory_TemplateUploads`
  FOREIGN KEY (`TemplateUploadID`)
  REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
  ON DELETE SET NULL
  ON UPDATE NO ACTION) 
ENGINE = InnoDB;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_Application_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_Application_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_Application_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`Applications`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`ApplicationHistory` (`VersionNumber`,`ApplicationID`,`ApplicationName`,`DiscoveryStateID`,`MigrationScopeID`,`BusinessServiceID`,`BusinessOwnerID`,`TechnicalOwnerID`,`BusinessUseDescription`,`DesignDocumentationLink`,`MigrationComplexityID`,`BusinessCriticalityID`,`CurrentSLAID`,`TargetSLAID`,`CurrentDispositionID`,`TargetDisposition`,`MoveGroupID`,`Notes`,`CustomField1`,`CustomField2`,`CustomField3`,`ChangeControlDecisionID`,`ChangeControlNumber`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.ApplicationID,NEW.ApplicationName,NEW.DiscoveryStateID,NEW.MigrationScopeID,NEW.BusinessServiceID,NEW.BusinessOwnerID,NEW.TechnicalOwnerID,NEW.BusinessUseDescription,NEW.DesignDocumentationLink,NEW.MigrationComplexityID,NEW.BusinessCriticalityID,NEW.CurrentSLAID,NEW.TargetSLAID,NEW.CurrentDispositionID,NEW.TargetDisposition,NEW.MoveGroupID,NEW.Notes,NEW.CustomField1,NEW.CustomField2,NEW.CustomField3,NEW.ChangeControlDecisionID,NEW.ChangeControlNumber,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

  INSERT INTO `StartupMigrationEngine`.`AssetMigrationScope`(`AssetID`,`AssetType`,`MigrationScopeId`,`MigrationScopeSignOffFlag`)
  VALUES(NEW.ApplicationID,'Application',NEW.MigrationScopeID,0);
  
 END$$
DELIMITER ;

-- -----------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_Application_UPDATE`
-- -----------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_Application_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_Application_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`Applications`
  FOR EACH ROW 
BEGIN
  SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`ApplicationHistory` where ApplicationID = NEW.ApplicationID);
  INSERT INTO `StartupMigrationEngine`.`ApplicationHistory` (`VersionNumber`,`ApplicationID`,`ApplicationName`,`DiscoveryStateID`,`MigrationScopeID`,`BusinessServiceID`,`BusinessOwnerID`,`TechnicalOwnerID`,`BusinessUseDescription`,`DesignDocumentationLink`,`MigrationComplexityID`,`BusinessCriticalityID`,`CurrentSLAID`,`TargetSLAID`,`CurrentDispositionID`,`TargetDisposition`,`MoveGroupID`,`Notes`,`CustomField1`,`CustomField2`,`CustomField3`,`ChangeControlDecisionID`,`ChangeControlNumber`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.ApplicationID,NEW.ApplicationName,NEW.DiscoveryStateID,NEW.MigrationScopeID,NEW.BusinessServiceID,NEW.BusinessOwnerID,NEW.TechnicalOwnerID,NEW.BusinessUseDescription,NEW.DesignDocumentationLink,NEW.MigrationComplexityID,NEW.BusinessCriticalityID,NEW.CurrentSLAID,NEW.TargetSLAID,NEW.CurrentDispositionID,NEW.TargetDisposition,NEW.MoveGroupID,NEW.Notes,NEW.CustomField1,NEW.CustomField2,NEW.CustomField3,NEW.ChangeControlDecisionID,NEW.ChangeControlNumber,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

  UPDATE `StartupMigrationEngine`.`AssetMigrationScope` SET MigrationScopeId = NEW.MigrationScopeID WHERE AssetID = NEW.ApplicationID AND AssetType = 'Application';

 END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`ApplicationComponentHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`ApplicationComponentHistory` (
  `ApplicationComponentHistoryID` INT(11) NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `ApplicationComponentID` INT NOT NULL,
  `ApplicationComponentName` VARCHAR(200) NOT NULL,
  `ApplicationID` INT NOT NULL,
  `Description` VARCHAR(2000) NULL,
  `MigrationScopeID` INT NULL,
  `MoveGroupID` INT NULL,
  `CurrentDispositionID` INT NULL,
  `TargetDisposition` VARCHAR(100) NULL,
  `CustomField1` VARCHAR(200) NULL,
  `CustomField2` VARCHAR(200) NULL,
  `CustomField3` VARCHAR(200) NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`ApplicationComponentHistoryID`),
  INDEX `fk_ApplicationComponentHistory_Applications_idx` (`ApplicationID` ASC),
  INDEX `fk_ApplicationComponentHistory_MigrationScopes_idx` (`MigrationScopeID` ASC),
  INDEX `fk_ApplicationComponentHistory_MoveGroups_idx` (`MoveGroupID` ASC),
  INDEX `fk_ApplicationComponentHistory_Dispositions1_idx` (`CurrentDispositionID` ASC),
  INDEX `fk_ApplicationComponentHistory_Dispositions2_idx` (`TargetDisposition` ASC),
  INDEX `fk_ApplicationComponentHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_ApplicationComponentHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_ApplicationComponentHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_ApplicationComponentHistory_ApplicationComponent_idx` (`ApplicationComponentID` ASC),
  CONSTRAINT `fk_ApplicationComponentHistory_ApplicationComponent`
    FOREIGN KEY (`ApplicationComponentID`)
    REFERENCES `StartupMigrationEngine`.`ApplicationComponents` (`ApplicationComponentID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationComponentHistory_Applications`
    FOREIGN KEY (`ApplicationID`)
    REFERENCES `StartupMigrationEngine`.`Applications` (`ApplicationID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationComponentHistory_MigrationScopes`
    FOREIGN KEY (`MigrationScopeID`)
    REFERENCES `StartupMigrationEngine`.`MigrationScopes` (`MigrationScopeID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationComponentHistory_MoveGroups`
    FOREIGN KEY (`MoveGroupID`)
    REFERENCES `StartupMigrationEngine`.`MoveGroups` (`MoveGroupID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationComponentHistory_Dispositions1`
    FOREIGN KEY (`CurrentDispositionID`)
    REFERENCES `StartupMigrationEngine`.`Dispositions` (`DispositionID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationComponentHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_ApplicationComponentHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
 CONSTRAINT `fk_ApplicationComponentHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationComponent_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ApplicationComponent_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationComponent_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`ApplicationComponents`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`ApplicationComponentHistory` (`VersionNumber`,`ApplicationComponentID`,`ApplicationComponentName`,`ApplicationID`,`Description`,`MigrationScopeID`,`MoveGroupID`,`CurrentDispositionID`,`TargetDisposition`,`CustomField1`,`CustomField2`,`CustomField3`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.ApplicationComponentID,NEW.ApplicationComponentName,NEW.ApplicationID,NEW.Description,NEW.MigrationScopeID,NEW.MoveGroupID,NEW.CurrentDispositionID,NEW.TargetDisposition,NEW.CustomField1,NEW.CustomField2,NEW.CustomField3,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

  INSERT INTO `StartupMigrationEngine`.`AssetMigrationScope`(`AssetID`,`AssetType`,`MigrationScopeId`,`MigrationScopeSignOffFlag`)
  VALUES(NEW.ApplicationComponentID,'ApplicationComponent',NEW.MigrationScopeID,0); 
  END$$
DELIMITER ;

-- -----------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_Application_UPDATE`
-- -----------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ApplicationComponent_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationComponent_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`ApplicationComponents`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`ApplicationComponentHistory` where ApplicationComponentID = NEW.ApplicationComponentID);
  INSERT INTO `StartupMigrationEngine`.`ApplicationComponentHistory` (`VersionNumber`,`ApplicationComponentID`,`ApplicationComponentName`,`ApplicationID`,`Description`,`MigrationScopeID`,`MoveGroupID`,`CurrentDispositionID`,`TargetDisposition`,`CustomField1`,`CustomField2`,`CustomField3`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.ApplicationComponentID,NEW.ApplicationComponentName,NEW.ApplicationID,NEW.Description,NEW.MigrationScopeID,NEW.MoveGroupID,NEW.CurrentDispositionID,NEW.TargetDisposition,NEW.CustomField1,NEW.CustomField2,NEW.CustomField3,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
  UPDATE `StartupMigrationEngine`.`AssetMigrationScope` SET MigrationScopeId = NEW.MigrationScopeID WHERE AssetID = NEW.ApplicationComponentID AND AssetType = 'ApplicationComponent';
  
  END$$
DELIMITER ;


-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`ApplicationInstanceHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`ApplicationInstanceHistory` (
  `ApplicationInstanceHistoryID` INT(11) NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `ApplicationInstanceID` INT NOT NULL,
  `ApplicationID` INT NOT NULL,
  `ApplicationInstanceName` VARCHAR(200) NOT NULL,
  `DiscoveryStateID` INT NULL,
  `MigrationScopeID` INT NULL,
  `BusinessOwnerID` INT NULL,
  `TechnicalOwnerID` INT NULL,
  `CurrentDispositionID` INT NULL,
  `TargetDisposition` VARCHAR(100) NULL,
  `MoveGroupID` INT NULL,
  `CurrentSLAID` INT NULL,
  `TargetSLAID` INT NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`ApplicationInstanceHistoryID`),
  INDEX `fk_ApplicationInstanceHistory_Applications_idx` (`ApplicationID` ASC),
  INDEX `fk_ApplicationInstanceHistory_BusinessOwner_idx` (`BusinessOwnerID` ASC),
  INDEX `fk_ApplicationInstanceHistory_TechnicalOwner_idx` (`TechnicalOwnerID` ASC),
  INDEX `fk_ApplicationInstanceHistory_Dispositions1_idx` (`CurrentDispositionID` ASC),
  INDEX `fk_ApplicationInstanceHistory_Dispositions2_idx` (`TargetDisposition` ASC),
  INDEX `fk_ApplicationInstanceHistory_MoveGroups_idx` (`MoveGroupID` ASC),
  INDEX `fk_ApplicationInstanceHistory_DiscoveryState_idx` (`DiscoveryStateID` ASC),
  INDEX `fk_ApplicationInstanceHistory_MigrationScopes_idx` (`MigrationScopeID` ASC),
  INDEX `fk_ApplicationInstanceHistory_SLAs1_idx` (`CurrentSLAID` ASC),
  INDEX `fk_ApplicationInstanceHistory_SLAs2_idx` (`TargetSLAID` ASC),
  INDEX `fk_ApplicationInstanceHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_ApplicationInstanceHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_ApplicationInstanceHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_ApplicationInstanceHistory_ApplicationInstances_idx` (`ApplicationInstanceID` ASC),
  CONSTRAINT `fk_ApplicationInstanceHistory_ApplicationInstances`
    FOREIGN KEY (`ApplicationInstanceID`)
    REFERENCES `StartupMigrationEngine`.`ApplicationInstances` (`ApplicationInstanceID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationInstanceHistory_Applications`
    FOREIGN KEY (`ApplicationID`)
    REFERENCES `StartupMigrationEngine`.`Applications` (`ApplicationID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationInstanceHistory_BusinessOwner`
    FOREIGN KEY (`BusinessOwnerID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationInstanceHistory_TechnicalOwner`
    FOREIGN KEY (`TechnicalOwnerID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationInstanceHistory_Dispositions1`
    FOREIGN KEY (`CurrentDispositionID`)
    REFERENCES `StartupMigrationEngine`.`Dispositions` (`DispositionID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationInstanceHistory_MoveGroups1`
    FOREIGN KEY (`MoveGroupID`)
    REFERENCES `StartupMigrationEngine`.`MoveGroups` (`MoveGroupID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationInstanceHistory_DiscoveryState1`
    FOREIGN KEY (`DiscoveryStateID`)
    REFERENCES `StartupMigrationEngine`.`DiscoveryState` (`DiscoveryStateID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationInstanceHistory_MigrationScopes1`
    FOREIGN KEY (`MigrationScopeID`)
    REFERENCES `StartupMigrationEngine`.`MigrationScopes` (`MigrationScopeID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationInstanceHistory_SLAs1`
    FOREIGN KEY (`CurrentSLAID`)
    REFERENCES `StartupMigrationEngine`.`SLAs` (`SLAID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationInstanceHistory_SLAs2`
    FOREIGN KEY (`TargetSLAID`)
    REFERENCES `StartupMigrationEngine`.`SLAs` (`SLAID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationInstanceHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_ApplicationInstanceHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationInstanceHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationInstances_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ApplicationInstances_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationInstances_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`ApplicationInstances`
  FOR EACH ROW 
BEGIN 
 INSERT INTO `StartupMigrationEngine`.`ApplicationInstanceHistory` (`VersionNumber`,`ApplicationInstanceID`,`ApplicationInstanceName`,`ApplicationID`,`DiscoveryStateID`,`MigrationScopeID`,`BusinessOwnerID`,`TechnicalOwnerID`,`CurrentDispositionID`,`TargetDisposition`,`MoveGroupID`,`CurrentSLAID`,`TargetSLAID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
 VALUES(1,NEW.ApplicationInstanceID,NEW.ApplicationInstanceName,NEW.ApplicationID,NEW.DiscoveryStateID,NEW.MigrationScopeID,NEW.BusinessOwnerID,NEW.TechnicalOwnerID,NEW.CurrentDispositionID,NEW.TargetDisposition,NEW.MoveGroupID,NEW.CurrentSLAID,NEW.TargetSLAID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

 INSERT INTO `StartupMigrationEngine`.`AssetMigrationScope`(`AssetID`,`AssetType`,`MigrationScopeId`,`MigrationScopeSignOffFlag`)
 VALUES(NEW.ApplicationInstanceID,'ApplicationInstance',NEW.MigrationScopeID,0);

 END$$
DELIMITER ;

-- -----------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationInstances_UPDATE`
-- -----------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ApplicationInstances_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationInstances_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`ApplicationInstances`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`ApplicationInstanceHistory` where ApplicationInstanceID = NEW.ApplicationInstanceID);
  INSERT INTO `StartupMigrationEngine`.`ApplicationInstanceHistory` (`VersionNumber`,`ApplicationInstanceID`,`ApplicationInstanceName`,`ApplicationID`,`DiscoveryStateID`,`MigrationScopeID`,`BusinessOwnerID`,`TechnicalOwnerID`,`CurrentDispositionID`,`TargetDisposition`,`MoveGroupID`,`CurrentSLAID`,`TargetSLAID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.ApplicationInstanceID,NEW.ApplicationInstanceName,NEW.ApplicationID,NEW.DiscoveryStateID,NEW.MigrationScopeID,NEW.BusinessOwnerID,NEW.TechnicalOwnerID,NEW.CurrentDispositionID,NEW.TargetDisposition,NEW.MoveGroupID,NEW.CurrentSLAID,NEW.TargetSLAID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
  UPDATE `StartupMigrationEngine`.`AssetMigrationScope` SET MigrationScopeId = NEW.MigrationScopeID WHERE AssetID = NEW.ApplicationInstanceID AND AssetType = 'ApplicationInstance';
  
  END$$
DELIMITER ;


-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`ApplicationComponentInstanceHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`ApplicationComponentInstanceHistory` (
  `ApplicationComponentInstanceHistoryID` INT NOT NULL AUTO_INCREMENT,  
  `VersionNumber` INT NOT NULL,
  `ApplicationComponentInstanceID` INT NOT NULL,
  `ApplicationComponentInstanceName` VARCHAR(100) NULL,
  `ApplicationComponentID` INT NOT NULL,
  `EnvironmentID` INT NULL,
  `ApplicationInstanceID` INT NULL,
  `ServerID` INT NULL,
  `PaaSID` INT NULL,
  `MoveGroupID` INT NULL,
  `TargetServerID` INT NULL,
  `TargetPaaSID` INT NULL,
  `MigrationScopeID` INT NULL,
  `CurrentSLAID` INT NULL,
  `TargetSLAID` INT NULL,
  `CurrentDispositionID` INT NULL,
  `TargetDisposition` VARCHAR(100) NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  `BusinessCriticalityID` INT NULL,
  `ChangeControlDecisionID` INT NULL,
  `ChangeControlNumber` VARCHAR(200) NULL,
  PRIMARY KEY (`ApplicationComponentInstanceHistoryID`),
  INDEX `fk_ApplicationComponentInstanceHistory_ApplicationComponents_idx` (`ApplicationComponentID` ASC),
  INDEX `fk_ApplicationComponentInstanceHistory_ApplicationInstances_idx` (`ApplicationInstanceID` ASC),
  INDEX `fk_ApplicationComponentInstanceHistory_Environments_idx` (`EnvironmentID` ASC),
  INDEX `fk_ApplicationComponentInstanceHistory_Servers1_idx` (`ServerID` ASC),
  INDEX `fk_ApplicationComponentInstanceHistory_PaaS1_idx` (`PaaSID` ASC),
  INDEX `fk_ApplicationComponentInstanceHistory_MoveGroups1_idx` (`MoveGroupID` ASC),
  INDEX `fk_ApplicationComponentInstanceHistory_Servers2_idx` (`TargetServerID` ASC),
  INDEX `fk_ApplicationComponentInstanceHistory_PaaS2_idx` (`TargetPaaSID` ASC),
  INDEX `fk_ApplicationComponentInstanceHistory_MigrationScopes1_idx` (`MigrationScopeID` ASC),
  INDEX `fk_ApplicationComponentInstanceHistory_SLAs1_idx` (`CurrentSLAID` ASC),
  INDEX `fk_ApplicationComponentInstanceHistory_SLAs2_idx` (`TargetSLAID` ASC),
  INDEX `fk_ApplicationComponentInstanceHistory_Dispositions1_idx` (`CurrentDispositionID` ASC),
  INDEX `fk_ApplicationComponentInstanceHistory_Dispositions2_idx` (`TargetDisposition` ASC),
  INDEX `fk_ApplicationComponentInstanceHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_ApplicationComponentInstanceHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_ApplicationComponentInstanceHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_ApplicationCOmponentInstanceHistory_ChangeControlDecision_idx` (`ChangeControlDecisionID` ASC),
  INDEX `fk_ApplicationComponentInstanceHistory_ApplicationCompIns_idx` (`ApplicationComponentInstanceID` ASC),
  CONSTRAINT `fk_ApplicationComponentInstanceHistory_ApplicationCompIns`
    FOREIGN KEY (`ApplicationComponentInstanceID`)
    REFERENCES `StartupMigrationEngine`.`ApplicationComponentInstances` (`ApplicationComponentInstanceID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
   CONSTRAINT `fk_ApplicationCOmponentInstanceHistory_ChangeControlDecisions`
    FOREIGN KEY (`ChangeControlDecisionID`)
    REFERENCES `StartupMigrationEngine`.`ChangeControlDecisions` (`ChangeControlDecisionID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationComponentInstanceHistory_ApplicationComponents`
    FOREIGN KEY (`ApplicationComponentID`)
    REFERENCES `StartupMigrationEngine`.`ApplicationComponents` (`ApplicationComponentID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationComponentInstanceHistory_ApplicationInstances`
    FOREIGN KEY (`ApplicationInstanceID`)
    REFERENCES `StartupMigrationEngine`.`ApplicationInstances` (`ApplicationInstanceID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationComponentInstanceHistory_Environments`
    FOREIGN KEY (`EnvironmentID`)
    REFERENCES `StartupMigrationEngine`.`Environments` (`EnvironmentID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationComponentInstanceHistory_Servers`
    FOREIGN KEY (`ServerID`)
    REFERENCES `StartupMigrationEngine`.`Servers` (`ServerID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationComponentInstanceHistory_PaaS1`
    FOREIGN KEY (`PaaSID`)
    REFERENCES `StartupMigrationEngine`.`PaaS` (`PaaSID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationComponentInstanceHistory_MoveGroups1`
    FOREIGN KEY (`MoveGroupID`)
    REFERENCES `StartupMigrationEngine`.`MoveGroups` (`MoveGroupID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationComponentInstanceHistory_Servers2`
    FOREIGN KEY (`TargetServerID`)
    REFERENCES `StartupMigrationEngine`.`Servers` (`ServerID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationComponentInstanceHistory_PaaS2`
    FOREIGN KEY (`TargetPaaSID`)
    REFERENCES `StartupMigrationEngine`.`PaaS` (`PaaSID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationComponentInstanceHistory_MigrationScopes1`
    FOREIGN KEY (`MigrationScopeID`)
    REFERENCES `StartupMigrationEngine`.`MigrationScopes` (`MigrationScopeID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationComponentInstanceHistory_SLAs1`
    FOREIGN KEY (`CurrentSLAID`)
    REFERENCES `StartupMigrationEngine`.`SLAs` (`SLAID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationComponentInstanceHistory_SLAs2`
    FOREIGN KEY (`TargetSLAID`)
    REFERENCES `StartupMigrationEngine`.`SLAs` (`SLAID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationComponentInstanceHistory_Dispositions1`
    FOREIGN KEY (`CurrentDispositionID`)
    REFERENCES `StartupMigrationEngine`.`Dispositions` (`DispositionID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationComponentInstanceHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_ApplicationComponentInstanceHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationComponentInstanceHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationComponentInstances_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ApplicationComponentInstances_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationComponentInstances_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`ApplicationComponentInstances`
  FOR EACH ROW 
BEGIN 
 INSERT INTO `StartupMigrationEngine`.`ApplicationComponentInstanceHistory` (`VersionNumber`,`ApplicationComponentInstanceID`,`ApplicationComponentInstanceName`,`ApplicationComponentID`,`EnvironmentID`,`ApplicationInstanceID`,`ServerID`,`PaaSID`,`MoveGroupID`,`TargetServerID`,`TargetPaaSID`,`MigrationScopeID`,`CurrentSLAID`,`TargetSLAID`,`CurrentDispositionID`,`TargetDisposition`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`,`ChangeControlDecisionID`,`ChangeControlNumber`)
 VALUES(1,NEW.ApplicationComponentInstanceID,NEW.ApplicationComponentInstanceName,NEW.ApplicationComponentID,NEW.EnvironmentID,NEW.ApplicationInstanceID,NEW.ServerID,NEW.PaaSID,NEW.MoveGroupID,NEW.TargetServerID,NEW.TargetPaaSID,NEW.MigrationScopeID,NEW.CurrentSLAID,NEW.TargetSLAID,NEW.CurrentDispositionID,NEW.TargetDisposition,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID,NEW.ChangeControlDecisionID,NEW.ChangeControlNumber);
 
 INSERT INTO `StartupMigrationEngine`.`AssetMigrationScope`(`AssetID`,`AssetType`,`MigrationScopeId`,`MigrationScopeSignOffFlag`)
 VALUES(NEW.ApplicationComponentInstanceID,'ApplicationComponentInstance',NEW.MigrationScopeID,0);

 END$$
DELIMITER ;

-- -----------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationComponentInstances_UPDATE`
-- -----------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ApplicationComponentInstances_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationComponentInstances_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`ApplicationComponentInstances`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`ApplicationComponentInstanceHistory` where ApplicationComponentInstanceID = NEW.ApplicationComponentInstanceID);
  INSERT INTO `StartupMigrationEngine`.`ApplicationComponentInstanceHistory` (`VersionNumber`,`ApplicationComponentInstanceID`,`ApplicationComponentInstanceName`,`ApplicationComponentID`,`EnvironmentID`,`ApplicationInstanceID`,`ServerID`,`PaaSID`,`MoveGroupID`,`TargetServerID`,`TargetPaaSID`,`MigrationScopeID`,`CurrentSLAID`,`TargetSLAID`,`CurrentDispositionID`,`TargetDisposition`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`,`ChangeControlDecisionID`,`ChangeControlNumber`)
  VALUES(@VersionNumber,NEW.ApplicationComponentInstanceID,NEW.ApplicationComponentInstanceName,NEW.ApplicationComponentID,NEW.EnvironmentID,NEW.ApplicationInstanceID,NEW.ServerID,NEW.PaaSID,NEW.MoveGroupID,NEW.TargetServerID,NEW.TargetPaaSID,NEW.MigrationScopeID,NEW.CurrentSLAID,NEW.TargetSLAID,NEW.CurrentDispositionID,NEW.TargetDisposition,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID,NEW.ChangeControlDecisionID,NEW.ChangeControlNumber);
  
  UPDATE `StartupMigrationEngine`.`AssetMigrationScope` SET MigrationScopeId = NEW.MigrationScopeID WHERE AssetID = NEW.ApplicationComponentInstanceID AND AssetType = 'ApplicationComponentInstance';
  
  END$$
DELIMITER ;


-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`ApplicationDataRestrictionHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`ApplicationDataRestrictionHistory` (
  `ApplicationRestrictionHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `ApplicationRestrictionID` INT NOT NULL,
  `ApplicationID` INT NOT NULL,
  `GeographicLocationID` INT NOT NULL,
  `LocationMandatory` CHAR(1) NULL,
  `LocationOptional` CHAR(1) NULL,
  `LocationForbidden` CHAR(1) NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`ApplicationRestrictionHistoryID`),
  INDEX `fk_ApplicationDataRestrictionHistory_Applications1_idx` (`ApplicationID` ASC),
  INDEX `fk_ApplicationDataRestrictionHistory_GeographicLocations_idx` (`GeographicLocationID` ASC),
  INDEX `fk_ApplicationDataRestrictionHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_ApplicationDataRestrictionHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_ApplicationDataRestrictionHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_ApplicationDataRestrictionHistory_AppDataRestrictions_idx` (`ApplicationRestrictionID` ASC),
  CONSTRAINT `fk_ApplicationDataRestrictionHistory_AppDataRestrictions`
    FOREIGN KEY (`ApplicationRestrictionID`)
    REFERENCES `StartupMigrationEngine`.`ApplicationDataRestrictions` (`ApplicationRestrictionID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationDataRestrictionHistory_Applications`
    FOREIGN KEY (`ApplicationID`)
    REFERENCES `StartupMigrationEngine`.`Applications` (`ApplicationID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationDataRestrictionHistory_GeographicLocations`
    FOREIGN KEY (`GeographicLocationID`)
    REFERENCES `StartupMigrationEngine`.`GeographicLocations` (`GeographicLocationID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationDataRestrictionHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_ApplicationDataRestrictionHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationDataRestrictionHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationDataRestrictions_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ApplicationDataRestrictions_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationDataRestrictions_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`ApplicationDataRestrictions`
  FOR EACH ROW 
BEGIN 
 INSERT INTO `StartupMigrationEngine`.`ApplicationDataRestrictionHistory`(`VersionNumber`,`ApplicationRestrictionID`,`ApplicationID`,`GeographicLocationID`,`LocationMandatory`,`LocationOptional`,`LocationForbidden`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
 VALUES(1,NEW.ApplicationRestrictionID,NEW.ApplicationID,NEW.GeographicLocationID,NEW.LocationMandatory,NEW.LocationOptional,NEW.LocationForbidden,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

 END$$
DELIMITER ;

-- -----------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationDataRestrictions_UPDATE`
-- -----------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ApplicationDataRestrictions_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationDataRestrictions_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`ApplicationDataRestrictions`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`ApplicationDataRestrictionHistory` where ApplicationRestrictionID = NEW.ApplicationRestrictionID);
  INSERT INTO `StartupMigrationEngine`.`ApplicationDataRestrictionHistory` (`VersionNumber`,`ApplicationRestrictionID`,`ApplicationID`,`GeographicLocationID`,`LocationMandatory`,`LocationOptional`,`LocationForbidden`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.ApplicationRestrictionID,NEW.ApplicationID,NEW.GeographicLocationID,NEW.LocationMandatory,NEW.LocationOptional,NEW.LocationForbidden,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
  END$$
DELIMITER ;


-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`ApplicationUserLocationHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`ApplicationUserLocationHistory` (
  `ApplicationUserLocationHistoryID` INT NOT NULL AUTO_INCREMENT, 
  `VersionNumber` INT NOT NULL,
  `ApplicationUserLocationID` INT NOT NULL,
  `ApplicationID` INT NOT NULL,
  `GeographicLocationID` INT NOT NULL,
  `UserCount` INT NULL,
  `Notes` VARCHAR(1000) NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`ApplicationUserLocationHistoryID`),
  INDEX `fk_ApplicationUserLocationHistory_Applications_idx` (`ApplicationID` ASC),
  INDEX `fk_ApplicationUserLocationHistory_GeographicLocations_idx` (`GeographicLocationID` ASC),
  INDEX `fk_ApplicationUserLocationHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_ApplicationUserLocationHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_ApplicationUserLocationHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_ApplicationUserLocationHistory_ApplicationUserLocations_idx` (`ApplicationUserLocationID` ASC),
  CONSTRAINT `fk_ApplicationUserLocationHistory_ApplicationUserLocations`
    FOREIGN KEY (`ApplicationUserLocationID`)
    REFERENCES `StartupMigrationEngine`.`ApplicationUserLocations` (`ApplicationUserLocationID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationUserLocationHistory_Applications`
    FOREIGN KEY (`ApplicationID`)
    REFERENCES `StartupMigrationEngine`.`Applications` (`ApplicationID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationUserLocationHistory_GeographicLocations`
    FOREIGN KEY (`GeographicLocationID`)
    REFERENCES `StartupMigrationEngine`.`GeographicLocations` (`GeographicLocationID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationUserLocationHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_ApplicationUserLocationHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationUserLocationHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)	
ENGINE = InnoDB;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationDataRestrictions_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ApplicationUserLocations_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationUserLocations_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`ApplicationUserLocations`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`ApplicationUserLocationHistory`(`VersionNumber`,`ApplicationUserLocationID`,`ApplicationID`,`GeographicLocationID`,`UserCount`,`Notes`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.ApplicationUserLocationID,NEW.ApplicationID,NEW.GeographicLocationID,NEW.UserCount,NEW.Notes,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
 
END$$
DELIMITER ;

-- -----------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationUserLocations_UPDATE`
-- -----------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ApplicationUserLocations_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationUserLocations_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`ApplicationUserLocations`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`ApplicationUserLocationHistory` where ApplicationUserLocationID = NEW.ApplicationUserLocationID);
  INSERT INTO `StartupMigrationEngine`.`ApplicationUserLocationHistory` (`VersionNumber`,`ApplicationUserLocationID`,`ApplicationID`,`GeographicLocationID`,`UserCount`,`Notes`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.ApplicationUserLocationID,NEW.ApplicationID,NEW.GeographicLocationID,NEW.UserCount,NEW.Notes,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
  END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`ApplicationOperationalServiceHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`ApplicationOperationalServiceHistory` (
  `ApplicationOperationalServiceHistoryID` INT NOT NULL AUTO_INCREMENT COMMENT '	', 
  `VersionNumber` INT NOT NULL,
  `ApplicationOperationalServiceID` INT NOT NULL,
  `ApplicationID` INT NOT NULL,
  `OperationalServiceID` INT NOT NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`ApplicationOperationalServiceHistoryID`),
  INDEX `fk_ApplicationOperationalServiceHistory_Applications_idx` (`ApplicationID` ASC),
  INDEX `fk_ApplicationOperationalServiceHistory_OperationalServices1_idx` (`OperationalServiceID` ASC),
  INDEX `fk_ApplicationOperationalServiceHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_ApplicationOperationalServiceHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_ApplicationOperationalServiceHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_AppOperServiceHistory_AppOperServices_idx` (`ApplicationOperationalServiceID` ASC),
  CONSTRAINT `fk_AppOperServiceHistory_AppOperServices`
    FOREIGN KEY (`ApplicationOperationalServiceID`)
    REFERENCES `StartupMigrationEngine`.`ApplicationOperationalServices` (`ApplicationOperationalServiceID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationOperationalServiceHistory_Applications`
    FOREIGN KEY (`ApplicationID`)
    REFERENCES `StartupMigrationEngine`.`Applications` (`ApplicationID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationOperationalServiceHistory_OperationalServices1`
    FOREIGN KEY (`OperationalServiceID`)
    REFERENCES `StartupMigrationEngine`.`OperationalServices` (`OperationalServiceID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationOperationalServiceHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_ApplicationOperationalServiceHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApplicationOperationalServiceHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationOperationalServices_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ApplicationOperationalServices_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationOperationalServices_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`ApplicationOperationalServices`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`ApplicationOperationalServiceHistory`(`VersionNumber`,`ApplicationOperationalServiceID`,`ApplicationID`,`OperationalServiceID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.ApplicationOperationalServiceID,NEW.ApplicationID,NEW.OperationalServiceID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

  END$$
DELIMITER ;

-- -----------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationUserLocations_UPDATE`
-- -----------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ApplicationOperationalServices_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationOperationalServices_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`ApplicationOperationalServices`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`ApplicationOperationalServiceHistory` where ApplicationOperationalServiceID = NEW.ApplicationOperationalServiceID);
  INSERT INTO `StartupMigrationEngine`.`ApplicationOperationalServiceHistory` (`VersionNumber`,`ApplicationOperationalServiceID`,`ApplicationID`,`OperationalServiceID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.ApplicationOperationalServiceID,NEW.ApplicationID,NEW.OperationalServiceID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
  END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`ApptoAppDependencyHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`ApptoAppDependencyHistory` (
  `AppToAppDependencieHistoryID` INT NOT NULL AUTO_INCREMENT, 
  `VersionNumber` INT NOT NULL,
  `AppToAppDependencieID` INT NOT NULL,
  `ApplicationID` INT NOT NULL,
  `DependentApplicationID` INT NOT NULL,
  `DependencyDescription` LONGTEXT NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`AppToAppDependencieHistoryID`),
  INDEX `fk_ApptoAppDependencieHistory_Applications_idx` (`ApplicationID` ASC),
  INDEX `fk_ApptoAppDependencieHistory_Applications2_idx` (`DependentApplicationID` ASC),
  INDEX `fk_ApptoAppDependencieHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_ApptoAppDependencieHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_ApptoAppDependencieHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_ApptoAppDependencieHistory_ApptoAppDependencieHistory_idx` (`AppToAppDependencieID` ASC), 
  CONSTRAINT `fk_ApptoAppDependencieHistory_ApptoAppDependencies`
    FOREIGN KEY (`AppToAppDependencieID`)
    REFERENCES `StartupMigrationEngine`.`ApptoAppDependencies` (`AppToAppDependencieID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApptoAppDependencieHistory_Applications`
    FOREIGN KEY (`ApplicationID`)
    REFERENCES `StartupMigrationEngine`.`Applications` (`ApplicationID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApptoAppDependencieHistory_Applications2`
    FOREIGN KEY (`DependentApplicationID`)
    REFERENCES `StartupMigrationEngine`.`Applications` (`ApplicationID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApptoAppDependencieHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_ApptoAppDependencieHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ApptoAppDependencieHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ApptoAppDependencies_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ApptoAppDependencies_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ApptoAppDependencies_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`ApptoAppDependencies`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`ApptoAppDependencyHistory`(`VersionNumber`,`AppToAppDependencieID`,`ApplicationID`,`DependentApplicationID`,`DependencyDescription`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.AppToAppDependencieID,NEW.ApplicationID,NEW.DependentApplicationID,NEW.DependencyDescription,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ApptoAppDependencies_UPDATE`
-- -----------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ApptoAppDependencies_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ApptoAppDependencies_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`ApptoAppDependencies`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`ApptoAppDependencyHistory` where AppToAppDependencieID = NEW.AppToAppDependencieID);
  INSERT INTO `StartupMigrationEngine`.`ApptoAppDependencyHistory` (`VersionNumber`,`AppToAppDependencieID`,`ApplicationID`,`DependentApplicationID`,`DependencyDescription`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.AppToAppDependencieID,NEW.ApplicationID,NEW.DependentApplicationID,NEW.DependencyDescription,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
  END$$
DELIMITER ;


-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`SoftwareHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`SoftwareHistory` (
  `SoftwareHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `SoftwareID` INT NOT NULL,
  `SoftwareName` VARCHAR(100) NOT NULL,
  `SoftwareManufacturerID` INT NULL,
  `SMEDetails` VARCHAR(1000) NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`SoftwareHistoryID`),
  INDEX `fk_SoftwareHistory_SoftwareManufacturers1_idx` (`SoftwareManufacturerID` ASC),
  INDEX `fk_SoftwareHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_SoftwareHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_SoftwareHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_SoftwareHistory_Software_idx` (`SoftwareID` ASC),
  CONSTRAINT `fk_SoftwareHistory_Software`
    FOREIGN KEY (`SoftwareID`)
    REFERENCES `StartupMigrationEngine`.`Software` (`SoftwareID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SoftwareHistory_SoftwareManufacturers1`
    FOREIGN KEY (`SoftwareManufacturerID`)
    REFERENCES `StartupMigrationEngine`.`SoftwareManufacturers` (`SoftwareManufacturerID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SoftwareHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_SoftwareHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SoftwareHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_Software_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_Software_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_Software_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`Software`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`SoftwareHistory`(`VersionNumber`,`SoftwareID`,`SoftwareName`,`SoftwareManufacturerID`,`SMEDetails`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.SoftwareID,NEW.SoftwareName,NEW.SoftwareManufacturerID,NEW.SMEDetails,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

 
END$$
DELIMITER ;

-- -----------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_Software_UPDATE`
-- -----------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_Software_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_Software_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`Software`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`SoftwareHistory` where SoftwareID = NEW.SoftwareID);
  INSERT INTO `StartupMigrationEngine`.`SoftwareHistory` (`VersionNumber`,`SoftwareID`,`SoftwareName`,`SoftwareManufacturerID`,`SMEDetails`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.SoftwareID,NEW.SoftwareName,NEW.SoftwareManufacturerID,NEW.SMEDetails,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
  END$$
DELIMITER ;


-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`SoftwareVersionHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`SoftwareVersionHistory` (
  `SoftwareVersionHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `SoftwareVersionID` INT NOT NULL,
  `SoftwareVersionName` VARCHAR(100) NOT NULL,
  `SoftwareID` INT NULL,
  `VersionOrderNumber` INT NULL,
  `SupportStatusID` INT NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`SoftwareVersionHistoryID`),
  INDEX `fk_SoftwareVersionHistory_Software_idx` (`SoftwareID` ASC),
  INDEX `fk_SoftwareVersionHistory_SupportStatus1_idx` (`SupportStatusID` ASC),
  INDEX `fk_SoftwareVersionHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_SoftwareVersionHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_SoftwareVersionHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_SoftwareVersionHistory_SoftwareVersions_idx` (`SoftwareVersionID` ASC),
  CONSTRAINT `fk_SoftwareVersionHistory_SoftwareVersions`
    FOREIGN KEY (`SoftwareVersionID`)
    REFERENCES `StartupMigrationEngine`.`SoftwareVersions` (`SoftwareVersionID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
 CONSTRAINT `fk_SoftwareVersionHistory_Software`
    FOREIGN KEY (`SoftwareID`)
    REFERENCES `StartupMigrationEngine`.`Software` (`SoftwareID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,   
  CONSTRAINT `fk_SoftwareVersionHistory_SupportStatus1`
    FOREIGN KEY (`SupportStatusID`)
    REFERENCES `StartupMigrationEngine`.`SupportStatus` (`SupportStatusID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SoftwareVersionHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_SoftwareVersionHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SoftwareVersionHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_SoftwareVersions_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_SoftwareVersions_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_SoftwareVersions_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`SoftwareVersions`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`SoftwareVersionHistory`(`VersionNumber`,`SoftwareVersionID`,`SoftwareVersionName`,`SoftwareID`,`VersionOrderNumber`,`SupportStatusID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.SoftwareVersionID,NEW.SoftwareVersionName,NEW.SoftwareID,NEW.VersionOrderNumber,NEW.SupportStatusID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
 
END$$
DELIMITER ;

-- -----------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_SoftwareVersions_UPDATE`
-- -----------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_SoftwareVersions_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_SoftwareVersions_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`SoftwareVersions`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`SoftwareVersionHistory` where SoftwareVersionID = NEW.SoftwareVersionID);
  INSERT INTO `StartupMigrationEngine`.`SoftwareVersionHistory` (`VersionNumber`,`SoftwareVersionID`,`SoftwareVersionName`,`SoftwareID`,`VersionOrderNumber`,`SupportStatusID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.SoftwareVersionID,NEW.SoftwareVersionName,NEW.SoftwareID,NEW.VersionOrderNumber,NEW.SupportStatusID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
  END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`SoftwareManufacturerHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`SoftwareManufacturerHistory` (
  `SoftwareManufacturerHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `SoftwareManufacturerID` INT NOT NULL,
  `SoftwareManufacturerName` VARCHAR(100) NOT NULL,
  `ContactDetails` VARCHAR(1000) NULL,
  `PreferredSupplier` CHAR(1) NULL,
  `TemplateUploadID` INT NULL,
  `CreationDate` TIMESTAMP NOT NULL,
  `CreatedByUserID` INT NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT NOT NULL,
  PRIMARY KEY (`SoftwareManufacturerHistoryID`),
  INDEX `fk_SoftwareManufacturerHistory_SoftwareManufacturerID_idx` (`SoftwareManufacturerID` ASC),
  INDEX `fk_SoftwareManufacturerHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_SoftwareManufacturerHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_SoftwareManufacturerHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  CONSTRAINT `fk_SoftwareManufacturerHistory_SoftwareManufacturerID`
    FOREIGN KEY (`SoftwareManufacturerID`)
    REFERENCES `StartupMigrationEngine`.`SoftwareManufacturers` (`SoftwareManufacturerID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SoftwareManufacturerHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_SoftwareManufacturerHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SoftwareManufacturerHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_SoftwareManufacturer_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_SoftwareManufacturer_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_SoftwareManufacturer_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`SoftwareManufacturers`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`SoftwareManufacturerHistory`(`VersionNumber`,`SoftwareManufacturerID`,`SoftwareManufacturerName`,`ContactDetails`,`PreferredSupplier`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.SoftwareManufacturerID,NEW.SoftwareManufacturerName,NEW.ContactDetails,NEW.PreferredSupplier,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
 
END$$
DELIMITER ;

-- -----------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_SoftwareManufacturer_UPDATE`
-- -----------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_SoftwareManufacturer_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_SoftwareManufacturer_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`SoftwareManufacturers`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`SoftwareManufacturerHistory` where SoftwareManufacturerID = NEW.SoftwareManufacturerID);
  INSERT INTO `StartupMigrationEngine`.`SoftwareManufacturerHistory`(`VersionNumber`,`SoftwareManufacturerID`,`SoftwareManufacturerName`,`ContactDetails`,`PreferredSupplier`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.SoftwareManufacturerID,NEW.SoftwareManufacturerName,NEW.ContactDetails,NEW.PreferredSupplier,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
  END$$
DELIMITER ;


-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`AppComponentSoftwareRequirementHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`AppComponentSoftwareRequirementHistory` (
  `AppComponentSoftwareRequirementHistoryID` INT NOT NULL AUTO_INCREMENT, 
  `VersionNumber` INT NOT NULL,
  `ApplicationComponentSoftwareRequirementID` INT NOT NULL,
  `ApplicationComnponentID` INT NOT NULL,
  `SoftwareVersionID` INT NOT NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`AppComponentSoftwareRequirementHistoryID`),
  INDEX `fk_AppComponentSoftwareRequirementHistory_ApplicationComp_idx` (`ApplicationComnponentID` ASC),
  INDEX `fk_AppComponentSoftwareRequirementHistory_SoftwareVersion_idx` (`SoftwareVersionID` ASC),
  INDEX `fk_AppComponentSoftwareRequirementHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_AppComponentSoftwareRequirementHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_AppComponentSoftwareRequirementHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_AppCompSoftwareReqHistory_AppCompSoftwareReq_idx` (`ApplicationComponentSoftwareRequirementID` ASC),
  CONSTRAINT `fk_AppCompSoftwareReqHistory_AppCompSoftwareReq`
    FOREIGN KEY (`ApplicationComponentSoftwareRequirementID`)
    REFERENCES `StartupMigrationEngine`.`ApplicationComponentSoftwareRequirements` (`ApplicationComponentSoftwareRequirementID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_AppComponentSoftwareRequirementHistory_ApplicationCompon`
    FOREIGN KEY (`ApplicationComnponentID`)
    REFERENCES `StartupMigrationEngine`.`ApplicationComponents` (`ApplicationComponentID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_AppComponentSoftwareRequirementHistory_SoftwareVersions1`
    FOREIGN KEY (`SoftwareVersionID`)
    REFERENCES `StartupMigrationEngine`.`SoftwareVersions` (`SoftwareVersionID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_AppComponentSoftwareRequirementHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_AppComponentSoftwareRequirementHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_AppComponentSoftwareRequirementHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationComponentSoftwareRequirements_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ApplicationComponentSoftwareRequirements_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationComponentSoftwareRequirements_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`ApplicationComponentSoftwareRequirements`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`AppComponentSoftwareRequirementHistory`(`VersionNumber`,`ApplicationComponentSoftwareRequirementID`,`ApplicationComnponentID`,`SoftwareVersionID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.ApplicationComponentSoftwareRequirementID,NEW.ApplicationComnponentID,NEW.SoftwareVersionID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationComponentSoftwareRequirements_UPDATE`
-- -----------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ApplicationComponentSoftwareRequirements_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ApplicationComponentSoftwareRequirements_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`ApplicationComponentSoftwareRequirements`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`AppComponentSoftwareRequirementHistory` where ApplicationComponentSoftwareRequirementID = NEW.ApplicationComponentSoftwareRequirementID);
  INSERT INTO `StartupMigrationEngine`.`AppComponentSoftwareRequirementHistory` (`VersionNumber`,`ApplicationComponentSoftwareRequirementID`,`ApplicationComnponentID`,`SoftwareVersionID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.ApplicationComponentSoftwareRequirementID,NEW.ApplicationComnponentID,NEW.SoftwareVersionID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
  END$$
DELIMITER ;


-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`LogicalDataLinkHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`LogicalDataLinkHistory` (
  `LogicalDataLinkHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `LogicalDataLinkID` INT NOT NULL,
  `SourceApplicationComponentID` INT NOT NULL,
  `TargetApplicationComponentID` INT NOT NULL,
  `SourceConfigurationRequired` CHAR(1) NULL COMMENT 'This will tell us where changes need to be made.',
  `TargetConfigurationRequired` CHAR(1) NULL,
  `SoureConfigDetails` VARCHAR(2000) NULL,
  `TargetConfigDetails` VARCHAR(2000) NULL,
  `FirewallChangesRequired` CHAR(1) NULL,
  `FirewallChanges` VARCHAR(2000) NULL,
  `SourceAndTargetMoveTogether` CHAR(1) NULL,
  `ProtocolID` INT NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`LogicalDataLinkHistoryID`),
  INDEX `fk_LogicalDataLinkHistory_ApplicationComponentsSource_idx` (`SourceApplicationComponentID` ASC),
  INDEX `fk_LogicalDataLinkHistory_ApplicationComponentsTarget_idx` (`TargetApplicationComponentID` ASC),
  INDEX `fk_LogicalDataLinkHistory_Protocols_idx` (`ProtocolID` ASC),
  INDEX `fk_LogicalDataLinkHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_LogicalDataLinkHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_LogicalDataLinkHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
   INDEX `fk_LogicalDataLinkHistory_LogicalDataLinks_idx` (`LogicalDataLinkID` ASC),
  CONSTRAINT `fk_LogicalDataLinkHistory_LogicalDataLinks`
    FOREIGN KEY (`LogicalDataLinkID`)
    REFERENCES `StartupMigrationEngine`.`LogicalDataLinks` (`LogicalDataLinkID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_LogicalDataLinkHistory_ApplicationComponentsSource`
    FOREIGN KEY (`SourceApplicationComponentID`)
    REFERENCES `StartupMigrationEngine`.`ApplicationComponents` (`ApplicationComponentID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_LogicalDataLinkHistory_ApplicationComponentsTarget`
    FOREIGN KEY (`TargetApplicationComponentID`)
    REFERENCES `StartupMigrationEngine`.`ApplicationComponents` (`ApplicationComponentID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_LogicalDataLinkHistory_Protocols`
	FOREIGN KEY (`ProtocolID`)
	REFERENCES `StartupMigrationEngine`.`Protocols` (`ProtocolID`)
	ON DELETE SET NULL
	ON UPDATE NO ACTION,
  CONSTRAINT `fk_LogicalDataLinkHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_LogicalDataLinkHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_LogicalDataLinkHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_LogicalDataLinks_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_LogicalDataLinks_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_LogicalDataLinks_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`LogicalDataLinks`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`LogicalDataLinkHistory`(`VersionNumber`,`LogicalDataLinkID`,`SourceApplicationComponentID`,`TargetApplicationComponentID`,`SourceConfigurationRequired`,`TargetConfigurationRequired`,`SoureConfigDetails`,`TargetConfigDetails`,`FirewallChangesRequired`,`FirewallChanges`,`SourceAndTargetMoveTogether`,`ProtocolID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
 VALUES(1,NEW.LogicalDataLinkID,NEW.SourceApplicationComponentID,NEW.TargetApplicationComponentID,NEW.SourceConfigurationRequired,NEW.TargetConfigurationRequired,NEW.SoureConfigDetails,NEW.TargetConfigDetails,NEW.FirewallChangesRequired,NEW.FirewallChanges,NEW.SourceAndTargetMoveTogether,NEW.ProtocolID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

  END$$
DELIMITER ;

-- -----------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_LogicalDataLinks_UPDATE`
-- -----------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_LogicalDataLinks_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_LogicalDataLinks_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`LogicalDataLinks`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`LogicalDataLinkHistory` where LogicalDataLinkID = NEW.LogicalDataLinkID);
  INSERT INTO `StartupMigrationEngine`.`LogicalDataLinkHistory` (`VersionNumber`,`LogicalDataLinkID`,`SourceApplicationComponentID`,`TargetApplicationComponentID`,`SourceConfigurationRequired`,`TargetConfigurationRequired`,`SoureConfigDetails`,`TargetConfigDetails`,`FirewallChangesRequired`,`FirewallChanges`,`SourceAndTargetMoveTogether`,`ProtocolID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.LogicalDataLinkID,NEW.SourceApplicationComponentID,NEW.TargetApplicationComponentID,NEW.SourceConfigurationRequired,NEW.TargetConfigurationRequired,NEW.SoureConfigDetails,NEW.TargetConfigDetails,NEW.FirewallChangesRequired,NEW.FirewallChanges,NEW.SourceAndTargetMoveTogether,NEW.ProtocolID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`OperatingSystemHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`OperatingSystemHistory` (
  `OperatingSystemHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `OperatingSystemID` INT NOT NULL,
  `OperatingSystemName` VARCHAR(100) NOT NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`OperatingSystemHistoryID`),
  INDEX `fk_OperatingSystemHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_OperatingSystemHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_OperatingSystemHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_OperatingSystemHistory_OperatingSystem_idx` (`OperatingSystemID` ASC),
  CONSTRAINT `fk_OperatingSystemHistory_OperatingSystem`
    FOREIGN KEY (`OperatingSystemID`)
    REFERENCES `StartupMigrationEngine`.`OperatingSystems` (`OperatingSystemID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_OperatingSystemHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_OperatingSystemHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_OperatingSystemHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- ---------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_OperatingSystem_INSERT`
-- ---------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_OperatingSystem_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_OperatingSystem_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`OperatingSystems`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`OperatingSystemHistory`(`VersionNumber`,`OperatingSystemID`,`OperatingSystemName`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.OperatingSystemID,NEW.OperatingSystemName,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- -----------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_OperatingSystem_UPDATE`
-- -----------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_OperatingSystem_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_OperatingSystem_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`OperatingSystems`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`OperatingSystemHistory` where OperatingSystemID = NEW.OperatingSystemID);
  INSERT INTO `StartupMigrationEngine`.`OperatingSystemHistory` (`VersionNumber`,`OperatingSystemID`,`OperatingSystemName`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.OperatingSystemID,NEW.OperatingSystemName,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`NetworkDeviceHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`NetworkDeviceHistory` (
  `NetworkDeviceHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `NetworkDeviceID` INT NOT NULL,
  `NetworkDeviceName` VARCHAR(100) NOT NULL,
  `IPAddress` VARCHAR(100) NULL,
  `NetworkDeviceTypeID` INT NULL,
  `DiscoveryStateID` INT NULL,
  `MigrationScopeID` INT NULL,
  `CurrentDispositionID` INT NULL,
  `TargetDisposition` VARCHAR(100) NULL,
  `MoveGroupID` INT NULL,
  `CurrentSLAID` INT NULL,
  `TargetSLAID` INT NULL,
  `RackID` INT NULL,
  `TargetRackID` INT NULL,
  `FloorLocationID` INT NULL,
  `TargetFloorLocationID` INT NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`NetworkDeviceHistoryID`),
  INDEX `fk_NetworkDeviceHistory_NetworkDeviceTypes1_idx` (`NetworkDeviceTypeID` ASC),
  INDEX `fk_NetworkDeviceHistory_DiscoveryState_idx_idx` (`DiscoveryStateID` ASC),
  INDEX `fk_NetworkDeviceHistory_MigrationScopes_idx_idx` (`MigrationScopeID` ASC),
  INDEX `fk_NetworkDeviceHistory_Dispositions1_idx` (`CurrentDispositionID` ASC),
  INDEX `fk_NetworkDeviceHistory_Dispositions2_idx` (`TargetDisposition` ASC),
  INDEX `fk_NetworkDeviceHistory_MoveGroups_idx` (`MoveGroupID` ASC),
  INDEX `fk_NetworkDeviceHistory_SLAs1_idx` (`CurrentSLAID` ASC),
  INDEX `fk_NetworkDeviceHistory_SLAs2_idx` (`TargetSLAID` ASC),
  INDEX `fk_NetworkDeviceHistory_FloorLocations1_idx` (`FloorLocationID` ASC),
  INDEX `fk_NetworkDeviceHistory_FloorLocations2_idx` (`TargetFloorLocationID` ASC),
  INDEX `fk_NetworkDeviceHistory_Racks1_idx` (`RackID` ASC),
  INDEX `fk_NetworkDeviceHistory_Racks2_idx` (`TargetRackID` ASC),
  INDEX `fk_NetworkDeviceHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_NetworkDeviceHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_NetworkDeviceHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_NetworkDeviceHistory_NetworkDevices_idx` (`NetworkDeviceID` ASC),
  CONSTRAINT `fk_NetworkDeviceHistory_NetworkDevices`
    FOREIGN KEY (`NetworkDeviceID`)
    REFERENCES `StartupMigrationEngine`.`NetworkDevices` (`NetworkDeviceID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_NetworkDeviceHistory_NetworkDeviceTypes1`
    FOREIGN KEY (`NetworkDeviceTypeID`)
    REFERENCES `StartupMigrationEngine`.`NetworkDeviceTypes` (`NetworkDeviceTypeID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_NetworkDeviceHistory_DiscoveryState`
	FOREIGN KEY (`DiscoveryStateID`)
	REFERENCES `StartupMigrationEngine`.`DiscoveryState` (`DiscoveryStateID`)
	ON DELETE SET NULL
	ON UPDATE NO ACTION,
  CONSTRAINT `fk_NetworkDeviceHistory_MigrationScopes`
	FOREIGN KEY (`MigrationScopeID`)
	REFERENCES `StartupMigrationEngine`.`MigrationScopes` (`MigrationScopeID`)
	ON DELETE SET NULL
	ON UPDATE NO ACTION,
  CONSTRAINT `fk_NetworkDeviceHistory_Dispositions1`
    FOREIGN KEY (`CurrentDispositionID`)
    REFERENCES `StartupMigrationEngine`.`Dispositions` (`DispositionID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_NetworkDeviceHistory_MoveGroups`
    FOREIGN KEY (`MoveGroupID`)
    REFERENCES `StartupMigrationEngine`.`MoveGroups` (`MoveGroupID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_NetworkDeviceHistory_SLAs1`
    FOREIGN KEY (`CurrentSLAID`)
    REFERENCES `StartupMigrationEngine`.`SLAs` (`SLAID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_NetworkDeviceHistory_SLAs2`
    FOREIGN KEY (`TargetSLAID`)
    REFERENCES `StartupMigrationEngine`.`SLAs` (`SLAID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_NetworkDeviceHistory_FloorLocations1`
    FOREIGN KEY (`FloorLocationID`)
    REFERENCES `StartupMigrationEngine`.`FloorLocations` (`FloorLocationID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_NetworkDeviceHistory_Racks1`
    FOREIGN KEY (`RackID`)
    REFERENCES `StartupMigrationEngine`.`Racks` (`RackID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_NetworkDeviceHistory_Racks2`
    FOREIGN KEY (`TargetRackID`)
    REFERENCES `StartupMigrationEngine`.`Racks` (`RackID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_NetworkDeviceHistory_FloorLocations2`
    FOREIGN KEY (`TargetFloorLocationID`)
    REFERENCES `StartupMigrationEngine`.`FloorLocations` (`FloorLocationID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_NetworkDeviceHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_NetworkDeviceHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_NetworkDeviceHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_NetworkDevices_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_NetworkDevices_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_NetworkDevices_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`NetworkDevices`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`NetworkDeviceHistory`(`VersionNumber`,`NetworkDeviceID`,`NetworkDeviceName`,`IPAddress`,`NetworkDeviceTypeID`,`DiscoveryStateID`,`MigrationScopeID`,`CurrentDispositionID`,`TargetDisposition`,`MoveGroupID`,`CurrentSLAID`,`TargetSLAID`,`RackID`,`TargetRackID`,`FloorLocationID`,`TargetFloorLocationID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.NetworkDeviceID,NEW.NetworkDeviceName,NEW.IPAddress,NEW.NetworkDeviceTypeID,NEW.DiscoveryStateID,NEW.MigrationScopeID,NEW.CurrentDispositionID,NEW.TargetDisposition,NEW.MoveGroupID,NEW.CurrentSLAID,NEW.TargetSLAID,NEW.RackID,NEW.TargetRackID,NEW.FloorLocationID,NEW.TargetFloorLocationID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
  INSERT INTO `StartupMigrationEngine`.`AssetMigrationScope`(`AssetID`,`AssetType`,`MigrationScopeId`,`MigrationScopeSignOffFlag`)
  VALUES(NEW.NetworkDeviceID,'NetworkDevice',NEW.MigrationScopeID,0);
 
END$$
DELIMITER ;

-- -----------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_NetworkDevices_UPDATE`
-- -----------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_NetworkDevices_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_NetworkDevices_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`NetworkDevices`
  FOR EACH ROW 
BEGIN
  SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`NetworkDeviceHistory` where NetworkDeviceID = NEW.NetworkDeviceID);
  
  INSERT INTO `StartupMigrationEngine`.`NetworkDeviceHistory` (`VersionNumber`,`NetworkDeviceID`,`NetworkDeviceName`,`IPAddress`,`NetworkDeviceTypeID`,`DiscoveryStateID`,`MigrationScopeID`,`CurrentDispositionID`,`TargetDisposition`,`MoveGroupID`,`CurrentSLAID`,`TargetSLAID`,`RackID`,`TargetRackID`,`FloorLocationID`,`TargetFloorLocationID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.NetworkDeviceID,NEW.NetworkDeviceName,NEW.IPAddress,NEW.NetworkDeviceTypeID,NEW.DiscoveryStateID,NEW.MigrationScopeID,NEW.CurrentDispositionID,NEW.TargetDisposition,NEW.MoveGroupID,NEW.CurrentSLAID,NEW.TargetSLAID,NEW.RackID,NEW.TargetRackID,NEW.FloorLocationID,NEW.TargetFloorLocationID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
  UPDATE `StartupMigrationEngine`.`AssetMigrationScope` SET MigrationScopeId = NEW.MigrationScopeID WHERE AssetID = NEW.NetworkDeviceID AND AssetType = 'NetworkDevice';
  
END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`NetworkDeviceUsedByServerHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`NetworkDeviceUsedByServerHistory` (
  `NetworkDeviceUsedByServerHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `NetworkDeviceUsedByServerID` INT NOT NULL,
  `NetworkDeviceID` INT NOT NULL,
  `ServerID` INT NOT NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`NetworkDeviceUsedByServerHistoryID`),
  INDEX `fk_NetworkDeviceUsedByServerHistory_NetworkDevices_idx` (`NetworkDeviceID` ASC),
  INDEX `fk_NetworkDeviceUsedByServerHistory_Servers_idx` (`ServerID` ASC),
  INDEX `fk_NetworkDeviceUsedByServerHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_NetworkDeviceUsedByServerHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_NetworkDeviceUsedByServerHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_NetDeviceUsedByServerHistory_NetDeviceUsedByServer_idx` (`NetworkDeviceUsedByServerID` ASC),
  CONSTRAINT `fk_NetDeviceUsedByServerHistory_NetDeviceUsedByServer`
    FOREIGN KEY (`NetworkDeviceUsedByServerID`)
    REFERENCES `StartupMigrationEngine`.`NetworkDeviceUsedByServer` (`NetworkDeviceUsedByServerID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_NetworkDeviceUsedByServerHistory_NetworkDevices`
    FOREIGN KEY (`NetworkDeviceID`)
    REFERENCES `StartupMigrationEngine`.`NetworkDevices` (`NetworkDeviceID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_NetworkDeviceUsedByServerHistory_Servers`
    FOREIGN KEY (`ServerID`)
    REFERENCES `StartupMigrationEngine`.`Servers` (`ServerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_NetworkDeviceUsedByServerHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_NetworkDeviceUsedByServerHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_NetworkDeviceUsedByServerHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_NetworkDeviceUsedByServer_INSERT`
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_NetworkDeviceUsedByServer_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_NetworkDeviceUsedByServer_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`NetworkDeviceUsedByServer`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`NetworkDeviceUsedByServerHistory`(`VersionNumber`,`NetworkDeviceUsedByServerID`,`NetworkDeviceID`,`ServerID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.NetworkDeviceUsedByServerID,NEW.NetworkDeviceID,NEW.ServerID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
   
END$$
DELIMITER ;

-- -----------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_NetworkDeviceUsedByServer_UPDATE`
-- -----------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_NetworkDeviceUsedByServer_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_NetworkDeviceUsedByServer_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`NetworkDeviceUsedByServer`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`NetworkDeviceUsedByServerHistory` where NetworkDeviceUsedByServerID = NEW.NetworkDeviceUsedByServerID);
  INSERT INTO `StartupMigrationEngine`.`NetworkDeviceUsedByServerHistory`(`VersionNumber`,`NetworkDeviceUsedByServerID`,`NetworkDeviceID`,`ServerID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.NetworkDeviceUsedByServerID,NEW.NetworkDeviceID,NEW.ServerID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
  END$$
DELIMITER ;

-- ---------------------------------------------------------------
-- Table `StartupMigrationEngine`.`OperatingSystemVersionHistory`
-- ---------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`OperatingSystemVersionHistory` (
  `OperatingSystemVersionHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `OperatingSystemVersionID` INT NOT NULL,
  `OperatingSystemVersion` VARCHAR(100) NOT NULL,
  `OperatingSystemID` INT NULL,
  `SupportStatusID` INT NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`OperatingSystemVersionHistoryID`),
  INDEX `fk_OperatingSystemVersionHistory_OperatingSystem_idx` (`OperatingSystemID` ASC),
  INDEX `fk_OperatingSystemVersionHistory_SupportStatus1_idx` (`SupportStatusID` ASC),
  INDEX `fk_OperatingSystemVersionHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_OperatingSystemVersionHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_OperatingSystemVersionHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_OperatingSystemVersionHistory_OperatingSystemVersions_idx` (`OperatingSystemVersionID` ASC),
  CONSTRAINT `fk_OperatingSystemVersionHistory_OperatingSystemVersions`
    FOREIGN KEY (`OperatingSystemVersionID`)
    REFERENCES `StartupMigrationEngine`.`OperatingSystemVersions` (`OperatingSystemVersionID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
 CONSTRAINT `fk_OperatingSystemVersionHistory_OperatingSystem`
    FOREIGN KEY (`OperatingSystemID`)
    REFERENCES `StartupMigrationEngine`.`OperatingSystems` (`OperatingSystemID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,   
  CONSTRAINT `fk_OperatingSystemVersionHistory_SupportStatus1`
    FOREIGN KEY (`SupportStatusID`)
    REFERENCES `StartupMigrationEngine`.`SupportStatus` (`SupportStatusID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_OperatingSystemVersionHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_OperatingSystemVersionHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_OperatingSystemVersionHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- ----------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_OperatingSystemVersions_INSERT`
-- ----------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_OperatingSystemVersions_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_OperatingSystemVersions_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`OperatingSystemVersions`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`OperatingSystemVersionHistory`(`VersionNumber`,`OperatingSystemVersionID`,`OperatingSystemVersion`,`OperatingSystemID`,`SupportStatusID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.OperatingSystemVersionID,NEW.OperatingSystemVersion,NEW.OperatingSystemID,NEW.SupportStatusID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
 
END$$
DELIMITER ;

-- ----------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_OperatingSystemVersions_UPDATE`
-- ----------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_OperatingSystemVersions_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_OperatingSystemVersions_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`OperatingSystemVersions`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`OperatingSystemVersionHistory` where OperatingSystemVersionID = NEW.OperatingSystemVersionID);
  INSERT INTO `StartupMigrationEngine`.`OperatingSystemVersionHistory` (`VersionNumber`,`OperatingSystemVersionID`,`OperatingSystemVersion`,`OperatingSystemID`,`SupportStatusID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.OperatingSystemVersionID,NEW.OperatingSystemVersion,NEW.OperatingSystemID,NEW.SupportStatusID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
  END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`StorageServiceHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`StorageServiceHistory` (
  `StorageServiceHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `StorageServiceID` INT NOT NULL,
  `StorageServiceName` VARCHAR(45) NOT NULL,
  `AvailableGB` INT NULL,
  `UsedGB` INT NULL,
  `StorageTypeID` INT NULL,
  `DiscoveryStateID` INT NULL,
  `MigrationScopeID` INT NULL,
  `CurrentDispositionID` INT NULL,
  `TargetDisposition` VARCHAR(100) NULL,
  `MoveGroupID` INT NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`StorageServiceHistoryID`),
  INDEX `fk_StorageServiceHistory_StorageType_idx_idx` (`StorageTypeID` ASC),
  INDEX `fk_StorageServiceHistory_DiscoveryState_idx_idx` (`DiscoveryStateID` ASC),
  INDEX `fk_StorageServiceHistory_MigrationScopes_idx_idx` (`MigrationScopeID` ASC),
  INDEX `fk_StorageServiceHistory_Dispositions1_idx` (`CurrentDispositionID` ASC),
  INDEX `fk_StorageServiceHistory_Dispositions2_idx` (`TargetDisposition` ASC),
  INDEX `fk_StorageServiceHistory_MoveGroups_idx` (`MoveGroupID` ASC),  
  INDEX `fk_StorageServiceHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_StorageServiceHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_StorageServiceHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_StorageServiceHistory_StorageServices_idx` (`StorageServiceID` ASC),
  CONSTRAINT `fk_StorageServiceHistory_StorageServices`
	FOREIGN KEY (`StorageServiceID`)
	REFERENCES `StartupMigrationEngine`.`StorageServices` (`StorageServiceID`)
	ON DELETE CASCADE
	ON UPDATE NO ACTION,
  CONSTRAINT `fk_StorageServiceHistory_StorageType`
	FOREIGN KEY (`StorageTypeID`)
	REFERENCES `StartupMigrationEngine`.`StorageTypes` (`StorageTypeID`)
	ON DELETE SET NULL
	ON UPDATE NO ACTION,
  CONSTRAINT `fk_StorageServiceHistory_DiscoveryState`
	FOREIGN KEY (`DiscoveryStateID`)
	REFERENCES `StartupMigrationEngine`.`DiscoveryState` (`DiscoveryStateID`)
	ON DELETE SET NULL
	ON UPDATE NO ACTION,
  CONSTRAINT `fk_StorageServiceHistory_MigrationScopes`
	FOREIGN KEY (`MigrationScopeID`)
	REFERENCES `StartupMigrationEngine`.`MigrationScopes` (`MigrationScopeID`)
	ON DELETE SET NULL
	ON UPDATE NO ACTION,
  CONSTRAINT `fk_StorageServiceHistory_Dispositions1`
    FOREIGN KEY (`CurrentDispositionID`)
    REFERENCES `StartupMigrationEngine`.`Dispositions` (`DispositionID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_StorageServiceHistory_MoveGroups`
    FOREIGN KEY (`MoveGroupID`)
    REFERENCES `StartupMigrationEngine`.`MoveGroups` (`MoveGroupID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,  
  CONSTRAINT `fk_StorageServiceHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_StorageServiceHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_StorageServiceHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- ----------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_StorageServices_INSERT`
-- ----------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_StorageServices_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_StorageServices_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`StorageServices`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`StorageServiceHistory`(`VersionNumber`,`StorageServiceID`,`StorageServiceName`,`AvailableGB`,`UsedGB`,`StorageTypeID`,`DiscoveryStateID`,`MigrationScopeID`,`CurrentDispositionID`,`TargetDisposition`,`MoveGroupID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.StorageServiceID,NEW.StorageServiceName,NEW.AvailableGB,NEW.UsedGB,NEW.StorageTypeID,NEW.DiscoveryStateID,NEW.MigrationScopeID,NEW.CurrentDispositionID,NEW.TargetDisposition,NEW.MoveGroupID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
  INSERT INTO `StartupMigrationEngine`.`AssetMigrationScope`(`AssetID`,`AssetType`,`MigrationScopeId`,`MigrationScopeSignOffFlag`)
  VALUES(NEW.StorageServiceID,'StorageService',NEW.MigrationScopeID,0);

END$$
DELIMITER ;

-- ----------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_StorageServices_UPDATE`
-- ----------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_StorageServices_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_StorageServices_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`StorageServices`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`StorageServiceHistory` where StorageServiceID = NEW.StorageServiceID);
  INSERT INTO `StartupMigrationEngine`.`StorageServiceHistory` (`VersionNumber`,`StorageServiceID`,`StorageServiceName`,`AvailableGB`,`UsedGB`,`StorageTypeID`,`DiscoveryStateID`,`MigrationScopeID`,`CurrentDispositionID`,`TargetDisposition`,`MoveGroupID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.StorageServiceID,NEW.StorageServiceName,NEW.AvailableGB,NEW.UsedGB,NEW.StorageTypeID,NEW.DiscoveryStateID,NEW.MigrationScopeID,NEW.CurrentDispositionID,NEW.TargetDisposition,NEW.MoveGroupID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
  UPDATE `StartupMigrationEngine`.`AssetMigrationScope` SET MigrationScopeId = NEW.MigrationScopeID WHERE AssetID = NEW.StorageServiceID AND AssetType = 'StorageService';
  
  END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`NASShareHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`NASShareHistory` (
  `NASShareHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `NASShareID` INT NOT NULL,
  `NASShareName` VARCHAR(200) NOT NULL,
  `StorageServiceID` INT NOT NULL,
  `AvailableGB` INT NULL,
  `UsedGB` INT NULL,
  `DiscoveryStateID` INT NULL,
  `MigrationScopeID` INT NULL,
  `CurrentDispositionID` INT NULL,
  `TargetDisposition` VARCHAR(100) NULL,
  `MoveGroupID` INT NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`NASShareHistoryID`),
  INDEX `fk_NASShareHistory_StorageServices_idx` (`StorageServiceID` ASC),
  INDEX `fk_NASShareHistory_DiscoveryState_idx_idx` (`DiscoveryStateID` ASC),
  INDEX `fk_NASShareHistory_MigrationScopes_idx_idx` (`MigrationScopeID` ASC),
  INDEX `fk_NASShareHistory_Dispositions1_idx` (`CurrentDispositionID` ASC),
  INDEX `fk_NASShareHistory_Dispositions2_idx` (`TargetDisposition` ASC),
  INDEX `fk_NASShareHistory_MoveGroups_idx` (`MoveGroupID` ASC),  
  INDEX `fk_NASShareHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_NASShareHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_NASShareHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_NASShareHistory__NASShares_idx` (`NASShareID` ASC),
  CONSTRAINT `fk_NASShareHistory__NASShares`
    FOREIGN KEY (`NASShareID`)
    REFERENCES `StartupMigrationEngine`.`NASShares` (`NASShareID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_NASShareHistory_StorageServices`
    FOREIGN KEY (`StorageServiceID`)
    REFERENCES `StartupMigrationEngine`.`StorageServices` (`StorageServiceID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_NASShareHistory_DiscoveryState`
	FOREIGN KEY (`DiscoveryStateID`)
	REFERENCES `StartupMigrationEngine`.`DiscoveryState` (`DiscoveryStateID`)
	ON DELETE SET NULL
	ON UPDATE NO ACTION,
  CONSTRAINT `fk_NASShareHistory_MigrationScopes`
	FOREIGN KEY (`MigrationScopeID`)
	REFERENCES `StartupMigrationEngine`.`MigrationScopes` (`MigrationScopeID`)
	ON DELETE SET NULL
	ON UPDATE NO ACTION,
  CONSTRAINT `fk_NASShareHistory_Dispositions1`
    FOREIGN KEY (`CurrentDispositionID`)
    REFERENCES `StartupMigrationEngine`.`Dispositions` (`DispositionID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_NASShareHistory_MoveGroups`
    FOREIGN KEY (`MoveGroupID`)
    REFERENCES `StartupMigrationEngine`.`MoveGroups` (`MoveGroupID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_NASShareHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_NASShareHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_NASShareHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- ----------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_NASShares_INSERT`
-- ----------------------------------------------------------------------

DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_NASShares_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_NASShares_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`NASShares`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`NASShareHistory`(`VersionNumber`,`NASShareID`,`NASShareName`,`StorageServiceID`,`AvailableGB`,`UsedGB`,`DiscoveryStateID`,`MigrationScopeID`,`CurrentDispositionID`,`TargetDisposition`,`MoveGroupID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.NASShareID,NEW.NASShareName,NEW.StorageServiceID,NEW.AvailableGB,NEW.UsedGB,NEW.DiscoveryStateID,NEW.MigrationScopeID,NEW.CurrentDispositionID,NEW.TargetDisposition,NEW.MoveGroupID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
  INSERT INTO `StartupMigrationEngine`.`AssetMigrationScope`(`AssetID`,`AssetType`,`MigrationScopeId`,`MigrationScopeSignOffFlag`)
  VALUES(NEW.NASShareID,'NASShare',NEW.MigrationScopeID,0);

END$$
DELIMITER ;

-- ----------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_NASShares_UPDATE`
-- ----------------------------------------------------------------------

DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_NASShares_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_NASShares_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`NASShares`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`NASShareHistory` where NASShareID = NEW.NASShareID);
  INSERT INTO `StartupMigrationEngine`.`NASShareHistory`(`VersionNumber`,`NASShareID`,`NASShareName`,`StorageServiceID`,`AvailableGB`,`UsedGB`,`DiscoveryStateID`,`MigrationScopeID`,`CurrentDispositionID`,`TargetDisposition`,`MoveGroupID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.NASShareID,NEW.NASShareName,NEW.StorageServiceID,NEW.AvailableGB,NEW.UsedGB,NEW.DiscoveryStateID,NEW.MigrationScopeID,NEW.CurrentDispositionID,NEW.TargetDisposition,NEW.MoveGroupID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
  UPDATE `StartupMigrationEngine`.`AssetMigrationScope` SET MigrationScopeId = NEW.MigrationScopeID WHERE AssetID = NEW.NASShareID AND AssetType = 'NASShare';
  
  END$$
DELIMITER ;


-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`SANLUNHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`SANLUNHistory` (
  `SANLUNHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  
  `SANLUNID` INT NOT NULL,
  `SANLUNName` VARCHAR(100) NOT NULL,
  `SANLUNTypeID` INT NULL,
  `StorageServiceID` INT NOT NULL,
  `SizeGB` INT NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`SANLUNHistoryID`),
  INDEX `fk_SANLUNHistory_SANLUNType_idx` (`SANLUNTypeID` ASC),
  INDEX `fk_SANLUNHistory_StorageServices1_idx` (`StorageServiceID` ASC),
  INDEX `fk_SANLUNHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_SANLUNHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_SANLUNHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_SANLUNHistory_SANLUNs_idx` (`SANLUNID` ASC),
  CONSTRAINT `fk_SANLUNHistory_SANLUNs`
    FOREIGN KEY (`SANLUNID`)
    REFERENCES `StartupMigrationEngine`.`SANLUNs` (`SANLUNID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SANLUNHistory_SANLUNType_idx`
    FOREIGN KEY (`SANLUNTypeID`)
    REFERENCES `StartupMigrationEngine`.`SanLunTypes` (`SANLUNTypeID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SANLUNHistory_StorageServices1`
    FOREIGN KEY (`StorageServiceID`)
    REFERENCES `StartupMigrationEngine`.`StorageServices` (`StorageServiceID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SANLUNHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_SANLUNHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SANLUNHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- ----------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_SANLUNs_INSERT`
-- ----------------------------------------------------------------------

DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_SANLUNs_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_SANLUNs_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`SANLUNs`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`SANLUNHistory`(`VersionNumber`,`SANLUNID`,`SANLUNName`,`SANLUNTypeID`,`StorageServiceID`,`SizeGB`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.SANLUNID,NEW.SANLUNName,NEW.SANLUNTypeID,NEW.StorageServiceID,NEW.SizeGB,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  END$$
  DELIMITER ;

-- ----------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_SANLUNs_UPDATE`
-- ----------------------------------------------------------------------

DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_SANLUNs_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_SANLUNs_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`SANLUNs`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`SANLUNHistory` where SANLUNID = NEW.SANLUNID);
  INSERT INTO `StartupMigrationEngine`.`SANLUNHistory`(`VersionNumber`,`SANLUNID`,`SANLUNName`,`SANLUNTypeID`,`StorageServiceID`,`SizeGB`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.SANLUNID,NEW.SANLUNName,NEW.SANLUNTypeID,NEW.StorageServiceID,NEW.SizeGB,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
  END$$
DELIMITER ;


-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`ServerHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`ServerHistory` (
  `ServerHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `ServerID` INT NOT NULL,
  `ServerName` VARCHAR(200) NOT NULL,
  `DiscoveryStateID` INT NULL,
  `MigrationScopeID` INT NULL,
  `SupportContactID` INT NULL,
  `OperatingSystemVersionID` INT NULL,
  `PhysicalServerID` INT NULL,
  `TargetPhysicalServerID` INT NULL,
  `CurrentDispositionID` INT NULL,
  `TargetDisposition` VARCHAR(100) NULL,
  `SerialNumber` VARCHAR(100) NULL, 
  `CPUType` VARCHAR(100) NULL, 
  `CPUCount` INT NULL, 
  `CPUSpeed` VARCHAR(100) NULL, 
  `MemoryGB` INT NULL, 
  `FQDN` VARCHAR(100) NULL, 
  `ModelDescription` VARCHAR(200) NULL,
  `VMFarmID` INT NULL,
  `TargetVMFarmID` INT NULL,
  `MoveGroupID` INT NULL,
  `CurrentSLAID` INT NULL,
  `TargetSLAID` INT NULL,
  `Notes` LONGTEXT NULL,
  `CustomField1` VARCHAR(200) NULL,
  `CustomField2` VARCHAR(200) NULL,
  `CustomField3` VARCHAR(200) NULL,
  `ChangeControlDecisionID` INT NULL,
  `ChangeControlNumber` VARCHAR(200) NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`ServerHistoryID`),
  INDEX `fk_ServerHistory_Users1_idx` (`SupportContactID` ASC),
  INDEX `fk_ServerHistory_PhysicalServer1_idx` (`PhysicalServerID` ASC),
  INDEX `fk_ServerHistory_Dispositions1_idx` (`CurrentDispositionID` ASC),
  INDEX `fk_ServerHistory_Dispositions2_idx` (`TargetDisposition` ASC),
  INDEX `fk_ServerHistory_VMFarms1_idx` (`VMFarmID` ASC),
  INDEX `fk_ServerHistory_DiscoveryState_idx` (`DiscoveryStateID` ASC),
  INDEX `fk_ServerHistory_MigrationScopes_idx` (`MigrationScopeID` ASC),
  INDEX `fk_ServerHistory_MoveGroups1_idx` (`MoveGroupID` ASC),
  INDEX `fk_ServerHistory_VMFarms2_idx` (`TargetVMFarmID` ASC),
  INDEX `fk_ServerHistory_PhysicalServer2_idx` (`TargetPhysicalServerID` ASC),
  INDEX `fk_ServerHistory_SLAs1_idx` (`CurrentSLAID` ASC),
  INDEX `fk_ServerHistory_SLAs2_idx` (`TargetSLAID` ASC),
  INDEX `fk_ServerHistory_OperatingSystemVersions_idx` (`OperatingSystemVersionID` ASC),
  INDEX `fk_ServerHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_ServerHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_ServerHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_ServerHistory_ChangeControlDecisions_idx` (`ChangeControlDecisionID` ASC),
  INDEX `fk_ServerHistory_Servers_idx` (`ServerID` ASC),
  CONSTRAINT `fk_ServerHistory_Servers`
    FOREIGN KEY (`ServerID`)
    REFERENCES `StartupMigrationEngine`.`Servers` (`ServerID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerHistory_Users1`
    FOREIGN KEY (`SupportContactID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
   CONSTRAINT `fk_ServerHistory_ChangeControlDecisions`
    FOREIGN KEY (`ChangeControlDecisionID`)
    REFERENCES `StartupMigrationEngine`.`ChangeControlDecisions` (`ChangeControlDecisionID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerHistory_PhysicalServer1`
    FOREIGN KEY (`PhysicalServerID`)
    REFERENCES `StartupMigrationEngine`.`PhysicalServers` (`PhysicalServerID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerHistory_Dispositions1`
    FOREIGN KEY (`CurrentDispositionID`)
    REFERENCES `StartupMigrationEngine`.`Dispositions` (`DispositionID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerHistory_VMFarms1`
    FOREIGN KEY (`VMFarmID`)
    REFERENCES `StartupMigrationEngine`.`VMFarms` (`VMFarmID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerHistory_DiscoveryState`
    FOREIGN KEY (`DiscoveryStateID`)
    REFERENCES `StartupMigrationEngine`.`DiscoveryState` (`DiscoveryStateID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerHistory_MigrationScopes`
    FOREIGN KEY (`MigrationScopeID`)
    REFERENCES `StartupMigrationEngine`.`MigrationScopes` (`MigrationScopeID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerHistory_MoveGroups1`
    FOREIGN KEY (`MoveGroupID`)
    REFERENCES `StartupMigrationEngine`.`MoveGroups` (`MoveGroupID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerHistory_VMFarms2`
    FOREIGN KEY (`TargetVMFarmID`)
    REFERENCES `StartupMigrationEngine`.`VMFarms` (`VMFarmID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerHistory_PhysicalServer2`
    FOREIGN KEY (`TargetPhysicalServerID`)
    REFERENCES `StartupMigrationEngine`.`PhysicalServers` (`PhysicalServerID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerHistory_SLAs1`
    FOREIGN KEY (`CurrentSLAID`)
    REFERENCES `StartupMigrationEngine`.`SLAs` (`SLAID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerHistory_SLAs2`
    FOREIGN KEY (`TargetSLAID`)
    REFERENCES `StartupMigrationEngine`.`SLAs` (`SLAID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerHistory_OperatingSystemVersions`
    FOREIGN KEY (`OperatingSystemVersionID`)
    REFERENCES `StartupMigrationEngine`.`OperatingSystemVersions` (`OperatingSystemVersionID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_ServerHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;



-- ----------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_Servers_INSERT`
-- ----------------------------------------------------------------------

DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_Servers_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_Servers_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`Servers`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`ServerHistory`(`VersionNumber`,`ServerID`,`ServerName`,`DiscoveryStateID`,`MigrationScopeID`,`SupportContactID`,`OperatingSystemVersionID`,`PhysicalServerID`,`TargetPhysicalServerID`,`CurrentDispositionID`,`TargetDisposition`,`SerialNumber`,`CPUType`,`CPUCount`,`CPUSpeed`,`MemoryGB`,`FQDN`,`ModelDescription`,`VMFarmID`,`TargetVMFarmID`,`MoveGroupID`,`CurrentSLAID`,`TargetSLAID`,`Notes`,`CustomField1`,`CustomField2`,`CustomField3`,`ChangeControlDecisionID`,`ChangeControlNumber`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedByUserID`)
  VALUES(1,NEW.ServerID ,NEW.ServerName ,NEW.DiscoveryStateID ,NEW.MigrationScopeID ,NEW.SupportContactID ,NEW.OperatingSystemVersionID ,NEW.PhysicalServerID ,NEW.TargetPhysicalServerID ,NEW.CurrentDispositionID ,NEW.TargetDisposition ,NEW.SerialNumber ,NEW.CPUType ,NEW.CPUCount ,NEW.CPUSpeed ,NEW.MemoryGB ,NEW.FQDN ,NEW.ModelDescription ,NEW.VMFarmID ,NEW.TargetVMFarmID ,NEW.MoveGroupID ,NEW.CurrentSLAID ,NEW.TargetSLAID ,NEW.Notes ,NEW.CustomField1 ,NEW.CustomField2 ,NEW.CustomField3 ,NEW.ChangeControlDecisionID ,NEW.ChangeControlNumber ,NEW.TemplateUploadID ,NEW.CreationDate ,NEW.CreatedByUserID ,NEW.LastUpdatedByUserID );
 
 INSERT INTO `StartupMigrationEngine`.`AssetMigrationScope`(`AssetID`,`AssetType`,`MigrationScopeId`,`MigrationScopeSignOffFlag`)
 VALUES(NEW.ServerID,'Server',NEW.MigrationScopeID,0);
 
 END$$
DELIMITER ;

-- ----------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_Servers_UPDATE`
-- ----------------------------------------------------------------------

DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_Servers_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_Servers_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`Servers`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`ServerHistory` where ServerID = NEW.ServerID);
  INSERT INTO `StartupMigrationEngine`.`ServerHistory`(`VersionNumber`,`ServerID`,`ServerName`,`DiscoveryStateID`,`MigrationScopeID`,`SupportContactID`,`OperatingSystemVersionID`,`PhysicalServerID`,`TargetPhysicalServerID`,`CurrentDispositionID`,`TargetDisposition`,`SerialNumber`,`CPUType`,`CPUCount`,`CPUSpeed`,`MemoryGB`,`FQDN`,`ModelDescription`,`VMFarmID`,`TargetVMFarmID`,`MoveGroupID`,`CurrentSLAID`,`TargetSLAID`,`Notes`,`CustomField1`,`CustomField2`,`CustomField3`,`ChangeControlDecisionID`,`ChangeControlNumber`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.ServerID ,NEW.ServerName ,NEW.DiscoveryStateID ,NEW.MigrationScopeID ,NEW.SupportContactID ,NEW.OperatingSystemVersionID ,NEW.PhysicalServerID ,NEW.TargetPhysicalServerID ,NEW.CurrentDispositionID ,NEW.TargetDisposition ,NEW.SerialNumber ,NEW.CPUType ,NEW.CPUCount ,NEW.CPUSpeed ,NEW.MemoryGB ,NEW.FQDN ,NEW.ModelDescription ,NEW.VMFarmID ,NEW.TargetVMFarmID ,NEW.MoveGroupID ,NEW.CurrentSLAID ,NEW.TargetSLAID ,NEW.Notes ,NEW.CustomField1 ,NEW.CustomField2 ,NEW.CustomField3 ,NEW.ChangeControlDecisionID ,NEW.ChangeControlNumber ,NEW.TemplateUploadID ,NEW.CreationDate ,NEW.CreatedByUserID ,NEW.LastUpdatedByUserID );
  
  UPDATE `StartupMigrationEngine`.`AssetMigrationScope` SET MigrationScopeId = NEW.MigrationScopeID WHERE AssetID = NEW.ServerID AND AssetType = 'Server';
  
  END$$
DELIMITER ;



-- --------------------------------------------------------------
-- Table `StartupMigrationEngine`.`HardwareManufacturerHistory`
-- --------------------------------------------------------------

CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`HardwareManufacturerHistory` (
  `HardwareManufacturerHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `HardwareManufacturerID` INT NOT NULL,
  `HardwareManufacturerName` VARCHAR(100) NOT NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`HardwareManufacturerHistoryID`),
  INDEX `fk_HardwareManufacturerHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_HardwareManufacturerHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_HardwareManufacturerHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_HardwareManufacturerHistory_HardwareManufacturer_idx` (`HardwareManufacturerID` ASC),
  CONSTRAINT `fk_HardwareManufacturerHistory_HardwareManufacturer`
    FOREIGN KEY (`HardwareManufacturerID`)
    REFERENCES `StartupMigrationEngine`.`HardwareManufacturers` (`HardwareManufacturerID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_HardwareManufacturerHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_HardwareManufacturerHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_HardwareManufacturerHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_HardwareManufacturer_INSERT`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_HardwareManufacturer_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_HardwareManufacturer_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`HardwareManufacturers`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`HardwareManufacturerHistory`(`VersionNumber`,`HardwareManufacturerID`,`HardwareManufacturerName`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.HardwareManufacturerID,NEW.HardwareManufacturerName,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_HardwareManufacturer_UPDATE`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_HardwareManufacturer_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_HardwareManufacturer_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`HardwareManufacturers`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`HardwareManufacturerHistory` where HardwareManufacturerID = NEW.HardwareManufacturerID);
  INSERT INTO `StartupMigrationEngine`.`HardwareManufacturerHistory` (`VersionNumber`,`HardwareManufacturerID`,`HardwareManufacturerName`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.HardwareManufacturerID,NEW.HardwareManufacturerName,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
END$$
DELIMITER ;


-- ---------------------------------------------------------------
-- Table `StartupMigrationEngine`.`AssetModelHistory`
-- ---------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`AssetModelHistory` (
  `AssetModelHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `AssetModelID` INT NOT NULL,
  `AssetModelName` VARCHAR(100) NOT NULL,
  `HardwareManufacturerID` INT NULL,
  `TemplateUploadID` INT(11) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`AssetModelHistoryID`),
  INDEX `fk_AssetModelHistory_HardwareManufacturer_idx` (`HardwareManufacturerID` ASC),
  INDEX `fk_AssetModelHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_AssetModelHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_AssetModelHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_AssetModelHistory_AssetModel_idx` (`AssetModelID` ASC),
  CONSTRAINT `fk_AssetModelHistory_AssetModels`
    FOREIGN KEY (`AssetModelID`)
    REFERENCES `StartupMigrationEngine`.`AssetModels` (`AssetModelID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_AssetModelHistory_HardwareManufacturer`
    FOREIGN KEY (`HardwareManufacturerID`)
    REFERENCES `StartupMigrationEngine`.`HardwareManufacturers` (`HardwareManufacturerID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,   
  CONSTRAINT `fk_AssetModelHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_AssetModelHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_AssetModelHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- ----------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_AssetModels_INSERT`
-- ----------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_AssetModels_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_AssetModels_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`AssetModels`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`AssetModelHistory`(`VersionNumber`,`AssetModelID`,`AssetModelName`,`HardwareManufacturerID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.AssetModelID,NEW.AssetModelName,NEW.HardwareManufacturerID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
 
END$$
DELIMITER ;

-- ----------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_AssetModels_UPDATE`
-- ----------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_AssetModels_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_AssetModels_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`AssetModels`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`AssetModelHistory` where AssetModelID = NEW.AssetModelID);
  INSERT INTO `StartupMigrationEngine`.`AssetModelHistory` (`VersionNumber`,`AssetModelID`,`AssetModelName`,`HardwareManufacturerID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.AssetModelID,NEW.AssetModelName,NEW.HardwareManufacturerID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
  END$$
DELIMITER ;


-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`PhysicalServerHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`PhysicalServerHistory` (
  `PhysicalServerHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `PhysicalServerID` INT NOT NULL,
  `PhysicalServerIdentifier` VARCHAR(100) NOT NULL,
  `AssetModelID` INT NULL,
  `DiscoveryStateID` INT NULL,
  `MigrationScopeID` INT NULL, 
  `CurrentDispositionID` INT NULL,
  `TargetDisposition` VARCHAR(100) NULL,
  `BladeChassisID` INT NULL,
  `TargetBladeChassisID` INT NULL,
  `RackID` INT NULL,
  `TargetRackID` INT NULL,
  `FloorLocationID` INT NULL,
  `TargetFloorLocationID` INT NULL,
  `MoveGroupID` INT NULL,
  `CustomField1` VARCHAR(200) NULL,
  `CustomField2` VARCHAR(200) NULL,
  `CustomField3` VARCHAR(200) NULL,
  `TemplateUploadID` INT NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT NOT NULL,
  PRIMARY KEY (`PhysicalServerHistoryID`),
  INDEX `fk_PhysicalServerHistory_AssetModels1_idx` (`AssetModelID` ASC),
  INDEX `fk_PhysicalServerHistory_DiscoveryState_idx` (`DiscoveryStateID` ASC),
  INDEX `fk_PhysicalServerHistory_MigrationScopes_idx` (`MigrationScopeID` ASC),
  INDEX `fk_PhysicalServerHistory_Dispositions1_idx` (`TargetDisposition` ASC),
  INDEX `fk_PhysicalServerHistory_Dispositions2_idx` (`CurrentDispositionID` ASC),
  INDEX `fk_PhysicalServerHistory_BladeChassis1_idx` (`BladeChassisID` ASC),
  INDEX `fk_PhysicalServerHistory_FloorLocations1_idx` (`FloorLocationID` ASC),
  INDEX `fk_PhysicalServerHistory_Racks1_idx` (`RackID` ASC),
  INDEX `fk_PhysicalServerHistory_MoveGroups1_idx` (`MoveGroupID` ASC),
  INDEX `fk_PhysicalServerHistory_Racks2_idx` (`TargetRackID` ASC),
  INDEX `fk_PhysicalServerHistory_FloorLocations2_idx` (`TargetFloorLocationID` ASC),
  INDEX `fk_PhysicalServerHistory_BladeChassis2_idx` (`TargetBladeChassisID` ASC),
  INDEX `fk_PhysicalServerHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_PhysicalServerHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_PhysicalServerHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_PhysicalServerHistory_PhysicalServer_idx` (`PhysicalServerID` ASC),
  CONSTRAINT `fk_PhysicalServerHistory_PhysicalServer`
    FOREIGN KEY (`PhysicalServerID`)
    REFERENCES `StartupMigrationEngine`.`PhysicalServers` (`PhysicalServerID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PhysicalServerHistory_AssetModels1`
    FOREIGN KEY (`AssetModelID`)
    REFERENCES `StartupMigrationEngine`.`AssetModels` (`AssetModelID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PhysicalServerHistory_DiscoveryState`
    FOREIGN KEY (`DiscoveryStateID`)
    REFERENCES `StartupMigrationEngine`.`DiscoveryState` (`DiscoveryStateID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PhysicalServerHistory_MigrationScopes`
    FOREIGN KEY (`MigrationScopeID`)
    REFERENCES `StartupMigrationEngine`.`MigrationScopes` (`MigrationScopeID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PhysicalServerHistory_Dispositions1`
    FOREIGN KEY (`CurrentDispositionID`)
    REFERENCES `StartupMigrationEngine`.`Dispositions` (`DispositionID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PhysicalServerHistory_BladeChassis1`
    FOREIGN KEY (`BladeChassisID`)
    REFERENCES `StartupMigrationEngine`.`BladeChassis` (`BladeChassisID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PhysicalServerHistory_FloorLocations1`
    FOREIGN KEY (`FloorLocationID`)
    REFERENCES `StartupMigrationEngine`.`FloorLocations` (`FloorLocationID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PhysicalServerHistory_Racks1`
    FOREIGN KEY (`RackID`)
    REFERENCES `StartupMigrationEngine`.`Racks` (`RackID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PhysicalServerHistory_MoveGroups1`
    FOREIGN KEY (`MoveGroupID`)
    REFERENCES `StartupMigrationEngine`.`MoveGroups` (`MoveGroupID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PhysicalServerHistory_Racks2`
    FOREIGN KEY (`TargetRackID`)
    REFERENCES `StartupMigrationEngine`.`Racks` (`RackID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PhysicalServerHistory_FloorLocations2`
    FOREIGN KEY (`TargetFloorLocationID`)
    REFERENCES `StartupMigrationEngine`.`FloorLocations` (`FloorLocationID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PhysicalServerHistory_BladeChassis2`
    FOREIGN KEY (`TargetBladeChassisID`)
    REFERENCES `StartupMigrationEngine`.`BladeChassis` (`BladeChassisID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PhysicalServerHistorys_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_PhysicalServerHistorys_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PhysicalServerHistorys_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- ----------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_PhysicalServers_INSERT`
-- ----------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_PhysicalServers_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_PhysicalServers_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`PhysicalServers`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`PhysicalServerHistory`(`VersionNumber`,`PhysicalServerID`,`PhysicalServerIdentifier`,`AssetModelID`,`DiscoveryStateID`,`MigrationScopeID`,`CurrentDispositionID`,`TargetDisposition`,`BladeChassisID`,`TargetBladeChassisID`,`RackID`,`TargetRackID`,`FloorLocationID`,`TargetFloorLocationID`,`MoveGroupID`,`CustomField1`,`CustomField2`,`CustomField3`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.PhysicalServerID,NEW.PhysicalServerIdentifier,NEW.AssetModelID,NEW.DiscoveryStateID,NEW.MigrationScopeID,NEW.CurrentDispositionID,NEW.TargetDisposition,NEW.BladeChassisID,NEW.TargetBladeChassisID,NEW.RackID,NEW.TargetRackID,NEW.FloorLocationID,NEW.TargetFloorLocationID,NEW.MoveGroupID,NEW.CustomField1,NEW.CustomField2,NEW.CustomField3,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
 
  INSERT INTO `StartupMigrationEngine`.`AssetMigrationScope`(`AssetID`,`AssetType`,`MigrationScopeId`,`MigrationScopeSignOffFlag`)
  VALUES(NEW.PhysicalServerID,'PhysicalServer',NEW.MigrationScopeID,0);

END$$
DELIMITER ;


-- ----------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_PhysicalServers_UPDATE`
-- ----------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_PhysicalServers_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_PhysicalServers_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`PhysicalServers`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`PhysicalServerHistory` where PhysicalServerID = NEW.PhysicalServerID);
  INSERT INTO `StartupMigrationEngine`.`PhysicalServerHistory` (`VersionNumber`,`PhysicalServerID`,`PhysicalServerIdentifier`,`AssetModelID`,`DiscoveryStateID`,`MigrationScopeID`,`CurrentDispositionID`,`TargetDisposition`,`BladeChassisID`,`TargetBladeChassisID`,`RackID`,`TargetRackID`,`FloorLocationID`,`TargetFloorLocationID`,`MoveGroupID`,`CustomField1`,`CustomField2`,`CustomField3`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.PhysicalServerID,NEW.PhysicalServerIdentifier,NEW.AssetModelID,NEW.DiscoveryStateID,NEW.MigrationScopeID,NEW.CurrentDispositionID,NEW.TargetDisposition,NEW.BladeChassisID,NEW.TargetBladeChassisID,NEW.RackID,NEW.TargetRackID,NEW.FloorLocationID,NEW.TargetFloorLocationID,NEW.MoveGroupID,NEW.CustomField1,NEW.CustomField2,NEW.CustomField3,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
  UPDATE `StartupMigrationEngine`.`AssetMigrationScope` SET MigrationScopeId = NEW.MigrationScopeID WHERE AssetID = NEW.PhysicalServerID AND AssetType = 'PhysicalServer';
  
  END$$
DELIMITER ;



-- --------------------------------------------------------------
-- Table `StartupMigrationEngine`.`OperationalServiceHistory`
-- --------------------------------------------------------------

CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`OperationalServiceHistory` (
  `OperationalServiceHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `OperationalServiceID` INT NOT NULL,
  `OperationalServiceName` VARCHAR(200) NOT NULL,
  `Description` VARCHAR(2000) NULL,
  `IsMigrating` CHAR(1) NULL,
  `TemplateUploadID` INT NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT NOT NULL,
  PRIMARY KEY (`OperationalServiceHistoryID`),
  INDEX `fk_OperationalServiceHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_OperationalServiceHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_OperationalServiceHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_OperationalServiceHistory_OperationalService_idx` (`OperationalServiceID` ASC),
  
  CONSTRAINT `fk_OperationalServiceHistory_OperationalService`
    FOREIGN KEY (`OperationalServiceID`)
    REFERENCES `StartupMigrationEngine`.`OperationalServices` (`OperationalServiceID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_OperationalServiceHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_OperationalServiceHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_OperationalServiceHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_OperationalService_INSERT`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_OperationalService_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_OperationalService_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`OperationalServices`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`OperationalServiceHistory`(`VersionNumber`,`OperationalServiceID`,`OperationalServiceName`,`Description`,`IsMigrating`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.OperationalServiceID,NEW.OperationalServiceName,NEW.Description,NEW.IsMigrating,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_OperationalService_UPDATE`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_OperationalService_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_OperationalService_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`OperationalServices`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`OperationalServiceHistory` where OperationalServiceID = NEW.OperationalServiceID);
  INSERT INTO `StartupMigrationEngine`.`OperationalServiceHistory`(`VersionNumber`,`OperationalServiceID`,`OperationalServiceName`,`Description`,`IsMigrating`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.OperationalServiceID,NEW.OperationalServiceName,NEW.Description,NEW.IsMigrating,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
END$$
DELIMITER ;

-- --------------------------------------------------------------
-- Table `StartupMigrationEngine`.`ProtocolHistory`
-- --------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`ProtocolHistory` (
  `ProtocolHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `ProtocolID` INT NOT NULL,
  `ProtocolName` VARCHAR(100) NOT NULL,
  `PortNumber` INT NOT NULL,
  `TCP` CHAR(1) NULL,
  `UDP` CHAR(1) NULL,
  `SCTP` CHAR(1) NULL,
  `Description` VARCHAR(1000) NULL,
  `TemplateUploadID` INT NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT NOT NULL,
  PRIMARY KEY (`ProtocolHistoryID`),
  INDEX `fk_ProtocolHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_ProtocolHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_ProtocolHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_ProtocolHistory_Protocol_idx` (`ProtocolID` ASC),
  CONSTRAINT `fk_ProtocolHistory_Protocol`
    FOREIGN KEY (`ProtocolID`)
    REFERENCES `StartupMigrationEngine`.`Protocols` (`ProtocolID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ProtocolHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_ProtocolHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ProtocolHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_Protocol_INSERT`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_Protocol_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_Protocol_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`Protocols`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`ProtocolHistory`(`VersionNumber`,`ProtocolID`,`ProtocolName`,`PortNumber`,`TCP`,`UDP`,`SCTP`,`Description`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.ProtocolID,NEW.ProtocolName,NEW.PortNumber,NEW.TCP,New.UDP,New.SCTP,New.Description,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_Protocol_UPDATE`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_Protocol_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_Protocol_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`Protocols`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`ProtocolHistory` where ProtocolID = NEW.ProtocolID);
  INSERT INTO `StartupMigrationEngine`.`ProtocolHistory`(`VersionNumber`,`ProtocolID`,`ProtocolName`,`PortNumber`,`TCP`,`UDP`,`SCTP`,`Description`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.ProtocolID,NEW.ProtocolName,NEW.PortNumber,NEW.TCP,New.UDP,New.SCTP,New.Description,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
END$$
DELIMITER ;

-- ------------------------------------------------------------
-- Table `StartupMigrationEngine`.`GeographicLocationHistory`
-- ------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`GeographicLocationHistory` (
  `GeographicLocationHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `GeographicLocationID` INT NOT NULL,
  `GeographicLocationName` VARCHAR(100) NOT NULL,
  `TemplateUploadID` INT NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT NOT NULL,
  PRIMARY KEY (`GeographicLocationHistoryID`),
  INDEX `fk_GeographicLocationHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_GeographicLocationHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_GeographicLocationHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_GeographicLocationHistory_GeographicLocation_idx` (`GeographicLocationID` ASC),
  CONSTRAINT `fk_GeographicLocationHistory_GeographicLocation`
    FOREIGN KEY (`GeographicLocationID`)
    REFERENCES `StartupMigrationEngine`.`GeographicLocations` (`GeographicLocationID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_GeographicLocationHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_GeographicLocationHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_GeographicLocationHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_GeographicLocation_INSERT`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_GeographicLocation_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_GeographicLocation_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`GeographicLocations`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`GeographicLocationHistory`(`VersionNumber`,`GeographicLocationID`,`GeographicLocationName`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.GeographicLocationID,NEW.GeographicLocationName,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_GeographicLocation_UPDATE`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_GeographicLocation_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_GeographicLocation_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`GeographicLocations`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`GeographicLocationHistory` where GeographicLocationID = NEW.GeographicLocationID);
  INSERT INTO `StartupMigrationEngine`.`GeographicLocationHistory`(`VersionNumber`,`GeographicLocationID`,`GeographicLocationName`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.GeographicLocationID,NEW.GeographicLocationName,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

  
END$$
DELIMITER ;

-- ---------------------------------------------------------
-- Table `StartupMigrationEngine`.`ServiceProviderHistory`
-- ---------------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`ServiceProviderHistory` (
  `ServiceProviderHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `ServiceProviderID` INT NOT NULL,
  `ServiceProviderName` VARCHAR(100) NOT NULL,
  `TemplateUploadID` INT NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT NOT NULL,
  PRIMARY KEY (`ServiceProviderHistoryID`),
  INDEX `fk_ServiceProviderHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_ServiceProviderHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_ServiceProviderHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_ServiceProviderHistory_ServiceProvider_idx` (`ServiceProviderID` ASC),
  CONSTRAINT `fk_ServiceProviderHistory_ServiceProvider`
    FOREIGN KEY (`ServiceProviderID`)
    REFERENCES `StartupMigrationEngine`.`ServiceProviders` (`ServiceProviderID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServiceProviderHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_ServiceProviderHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServiceProviderHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ServiceProvider_INSERT`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ServiceProvider_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ServiceProvider_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`ServiceProviders`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`ServiceProviderHistory`(`VersionNumber`,`ServiceProviderID`,`ServiceProviderName`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.ServiceProviderID,NEW.ServiceProviderName,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ServiceProvider_UPDATE`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ServiceProvider_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ServiceProvider_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`ServiceProviders`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`ServiceProviderHistory` where ServiceProviderID = NEW.ServiceProviderID);
  INSERT INTO `StartupMigrationEngine`.`ServiceProviderHistory`(`VersionNumber`,`ServiceProviderID`,`ServiceProviderName`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.ServiceProviderID,NEW.ServiceProviderName,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
END$$
DELIMITER ;

-- ---------------------------------------------------------
-- Table `StartupMigrationEngine`.`PaaSHistory`
-- ---------------------------------------------------------

CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`PaaSHistory` (
  `PaaSHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `PaaSID` INT NOT NULL,
  `PaaSName` VARCHAR(100) NOT NULL,
  `ServiceProviderID` INT NULL,
  `TemplateUploadID` INT NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT NOT NULL,
  PRIMARY KEY (`PaaSHistoryID`),
  INDEX `fk_PaaSHistory_ServiceProvider1_idx` (`ServiceProviderID` ASC),
  INDEX `fk_PaaSHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_PaaSHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_PaaSHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_PaaSHistory_PaaS_idx` (`PaaSID` ASC),
  CONSTRAINT `fk_PaaSHistory_PaaS`
    FOREIGN KEY (`PaaSID`)
    REFERENCES `StartupMigrationEngine`.`PaaS` (`PaaSID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PaaSHistory_ServiceProvider1`
    FOREIGN KEY (`ServiceProviderID`)
    REFERENCES `StartupMigrationEngine`.`ServiceProviders` (`ServiceProviderID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PaaSHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_PaaSHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PaaSHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_PaaS_INSERT`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_PaaS_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_PaaS_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`PaaS`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`PaaSHistory`(`VersionNumber`,`PaaSID`,`PaaSName`,`ServiceProviderID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.PaaSID,NEW.PaaSName,NEW.ServiceProviderID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_PaaS_UPDATE`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_PaaS_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_PaaS_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`PaaS`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`PaaSHistory` where PaaSID = NEW.PaaSID);
  INSERT INTO `StartupMigrationEngine`.`PaaSHistory`(`VersionNumber`,`PaaSID`,`PaaSName`,`ServiceProviderID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.PaaSID,NEW.PaaSName,NEW.ServiceProviderID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

  
END$$
DELIMITER ;





-- ---------------------------------------------------------
-- Table `StartupMigrationEngine`.`BusinessServiceHistory`
-- ---------------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`BusinessServiceHistory` (
  `BusinessServiceHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `BusinessServiceID` INT NOT NULL,
  `BusinessServiceName` VARCHAR(200) NOT NULL,
  `TemplateUploadID` INT NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT NOT NULL,
  PRIMARY KEY (`BusinessServiceHistoryID`),
  INDEX `fk_BusinessServiceHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_BusinessServiceHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_BusinessServiceHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_BusinessServiceHistory_BusinessService_idx` (`BusinessServiceID` ASC),
   CONSTRAINT `fk_BusinessServiceHistory_BusinessService`
    FOREIGN KEY (`BusinessServiceID`)
    REFERENCES `StartupMigrationEngine`.`BusinessServices` (`BusinessServiceID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_BusinessServiceHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_BusinessServiceHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_BusinessServiceHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_BusinessService_INSERT`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_BusinessService_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_BusinessService_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`BusinessServices`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`BusinessServiceHistory`(`VersionNumber`,`BusinessServiceID`,`BusinessServiceName`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.BusinessServiceID,NEW.BusinessServiceName,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_BusinessService_UPDATE`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_BusinessService_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_BusinessService_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`BusinessServices`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`BusinessServiceHistory` where BusinessServiceID = NEW.BusinessServiceID);
   INSERT INTO `StartupMigrationEngine`.`BusinessServiceHistory`(`VersionNumber`,`BusinessServiceID`,`BusinessServiceName`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.BusinessServiceID,NEW.BusinessServiceName,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
END$$
DELIMITER ;


-- ----------------------------------------------------------------
-- Table `StartupMigrationEngine`.`ServerInstalledSoftwareHistory`
-- ----------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`ServerInstalledSoftwareHistory` (
  `ServerInstalledSoftwareHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `ServerInstalledSoftwareID` INT NOT NULL,
  `ServerID` INT NOT NULL,
  `SoftwareVersionID` INT NOT NULL,
  `Notes` VARCHAR(2000) NULL,
  `TemplateUploadID` INT NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT NOT NULL,
  PRIMARY KEY (`ServerInstalledSoftwareHistoryID`),
  INDEX `fk_ServerInstalledSoftwareHistory_Servers1_idx` (`ServerID` ASC),
  INDEX `fk_ServerInstalledSoftwareHistory_SoftwareVersions1_idx` (`SoftwareVersionID` ASC),
  INDEX `fk_ServerInstalledSoftwareHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_ServerInstalledSoftwareHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_ServerInstalledSoftwareHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_ServerInstalledSoftwareHistory_ServerInstalledSoftwareID_idx` (`ServerInstalledSoftwareID` ASC),
  CONSTRAINT `fk_ServerInstalledSoftwareHistory_ServerInstalledSoftwareID`
    FOREIGN KEY (`ServerInstalledSoftwareID`)
    REFERENCES `StartupMigrationEngine`.`ServerInstalledSoftware` (`ServerInstalledSoftwareID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerInstalledSoftwareHistory_Servers1`
    FOREIGN KEY (`ServerID`)
    REFERENCES `StartupMigrationEngine`.`Servers` (`ServerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerInstalledSoftwareHistory_SoftwareVersions1`
    FOREIGN KEY (`SoftwareVersionID`)
    REFERENCES `StartupMigrationEngine`.`SoftwareVersions` (`SoftwareVersionID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerInstalledSoftwareHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_ServerInstalledSoftwareHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServerInstalledSoftwareHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ServerInstalledSoftware_INSERT`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ServerInstalledSoftware_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ServerInstalledSoftware_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`ServerInstalledSoftware`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`ServerInstalledSoftwareHistory`(`VersionNumber`,`ServerInstalledSoftwareID`,`ServerID`,`SoftwareVersionID`,`Notes`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.ServerInstalledSoftwareID,NEW.ServerID,NEW.SoftwareVersionID,NEW.Notes,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ServerInstalledSoftware_UPDATE`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_ServerInstalledSoftware_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_ServerInstalledSoftware_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`ServerInstalledSoftware`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`ServerInstalledSoftwareHistory` where ServerInstalledSoftwareID = NEW.ServerInstalledSoftwareID);
   INSERT INTO `StartupMigrationEngine`.`ServerInstalledSoftwareHistory`(`VersionNumber`,`ServerInstalledSoftwareID`,`ServerID`,`SoftwareVersionID`,`Notes`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
   VALUES(@VersionNumber,NEW.ServerInstalledSoftwareID,NEW.ServerID,NEW.SoftwareVersionID,NEW.Notes,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
END$$
DELIMITER ;


-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`VMFarmHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`VMFarmHistory` (
  `VMFarmHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `VMFarmID` INT NOT NULL,
  `VMFarmName` VARCHAR(200) NOT NULL,
  `VMHypervisorTypeID` INT NULL,
  `PhysicalServerID` INT NULL,
  `TemplateUploadID` INT NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT NOT NULL,
  PRIMARY KEY (`VMFarmHistoryID`),
  INDEX `fk_VMFarmHistory_VMHypervisorTypes1_idx` (`VMHypervisorTypeID` ASC),
  INDEX `fk_VMFarmHistory_PhysicalServer1_idx` (`PhysicalServerID` ASC),
  INDEX `fk_VMFarmHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_VMFarmHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_VMFarmHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_VMFarmHistory_VMFarmID_idx` (`VMFarmID` ASC),
  CONSTRAINT `fk_VMFarmHistory_VMFarmID`
    FOREIGN KEY (`VMFarmID`)
    REFERENCES `StartupMigrationEngine`.`VMFarms` (`VMFarmID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_VMFarmHistory_VMHypervisorTypes1`
    FOREIGN KEY (`VMHypervisorTypeID`)
    REFERENCES `StartupMigrationEngine`.`VMHypervisorTypes` (`VMHypervisorTypeID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_VMFarmHistory_PhysicalServer1`
    FOREIGN KEY (`PhysicalServerID`)
    REFERENCES `StartupMigrationEngine`.`PhysicalServers` (`PhysicalServerID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_VMFarmHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_VMFarmHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_VMFarmHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_VMFarm_INSERT`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_VMFarm_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_VMFarm_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`VMFarms`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`VMFarmHistory`(`VersionNumber`,`VMFarmID`,`VMFarmName`,`VMHypervisorTypeID`,`PhysicalServerID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.VMFarmID,NEW.VMFarmName,NEW.VMHypervisorTypeID,NEW.PhysicalServerID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_ServerInstalledSoftware_UPDATE`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_VMFarm_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_VMFarm_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`VMFarms`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`VMFarmHistory` where VMFarmID = NEW.VMFarmID);
   INSERT INTO `StartupMigrationEngine`.`VMFarmHistory`(`VersionNumber`,`VMFarmID`,`VMFarmName`,`VMHypervisorTypeID`,`PhysicalServerID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
   VALUES(@VersionNumber,NEW.VMFarmID,NEW.VMFarmName,NEW.VMHypervisorTypeID,NEW.PhysicalServerID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
END$$
DELIMITER ;


-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`OtherHardwareHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`OtherHardwareHistory` (
  `OtherHardwareHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `OtherHardwareID` INT NOT NULL,
  `OtherHardwareName` VARCHAR(100) NOT NULL,
  `OtherHardwareTypeID` INT NULL,
  `DiscoveryStateID` INT NULL,
  `MigrationScopeID` INT NULL,
  `CurrentDispositionID` INT NULL,
  `TargetDisposition` VARCHAR(100) NULL,
  `MoveGroupID` INT NULL,
  `RackID` INT NULL,
  `TargetRackID` INT NULL,
  `FloorLocationID` INT NULL,
  `TargetFloorLocationID` INT NULL,
  `TemplateUploadID` INT NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT NOT NULL,
  PRIMARY KEY (`OtherHardwareHistoryID`),
  INDEX `fk_OtherHardwareHistory_DiscoveryState_idx_idx` (`DiscoveryStateID` ASC),
  INDEX `fk_OtherHardwareHistory_MigrationScopes_idx_idx` (`MigrationScopeID` ASC),
  INDEX `fk_OtherHardwareHistory_Dispositions1_idx` (`CurrentDispositionID` ASC),
  INDEX `fk_OtherHardwareHistory_Dispositions2_idx` (`TargetDisposition` ASC),
  INDEX `fk_OtherHardwareHistory_MoveGroups_idx` (`MoveGroupID` ASC),
  INDEX `fk_OtherHardwareHistory_FloorLocations1_idx` (`FloorLocationID` ASC),
  INDEX `fk_OtherHardwareHistory_FloorLocations2_idx` (`TargetFloorLocationID` ASC),
  INDEX `fk_OtherHardwareHistory_Racks1_idx` (`RackID` ASC),
  INDEX `fk_OtherHardwareHistory_Racks2_idx` (`TargetRackID` ASC),
  INDEX `fk_OtherHardwareHistory_TemplateUploads_idx` (`TemplateUploadID` ASC),
  INDEX `fk_OtherHardwareHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_OtherHardwareHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_OtherHardwareHistory_OtherHardwareID_idx` (`OtherHardwareID` ASC),
  CONSTRAINT `fk_OtherHardwareHistory_OtherHardwareID`
    FOREIGN KEY (`OtherHardwareID`)
    REFERENCES `StartupMigrationEngine`.`OtherHardwares` (`OtherHardwareID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_OtherHardwareHistory_OtherHardwareType`
	FOREIGN KEY (`OtherHardwareTypeID`)
	REFERENCES `StartupMigrationEngine`.`OtherHardwareTypes` (`OtherHardwareTypeID`)
	ON DELETE SET NULL
	ON UPDATE NO ACTION,
  CONSTRAINT `fk_OtherHardwareHistory_DiscoveryState`
	FOREIGN KEY (`DiscoveryStateID`)
	REFERENCES `StartupMigrationEngine`.`DiscoveryState` (`DiscoveryStateID`)
	ON DELETE SET NULL
	ON UPDATE NO ACTION,
  CONSTRAINT `fk_OtherHardwareHistory_MigrationScopes`
	FOREIGN KEY (`MigrationScopeID`)
	REFERENCES `StartupMigrationEngine`.`MigrationScopes` (`MigrationScopeID`)
	ON DELETE SET NULL
	ON UPDATE NO ACTION,
  CONSTRAINT `fk_OtherHardwareHistory_Dispositions1`
    FOREIGN KEY (`CurrentDispositionID`)
    REFERENCES `StartupMigrationEngine`.`Dispositions` (`DispositionID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_OtherHardwareHistory_MoveGroups`
    FOREIGN KEY (`MoveGroupID`)
    REFERENCES `StartupMigrationEngine`.`MoveGroups` (`MoveGroupID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_OtherHardwareHistory_FloorLocations1`
    FOREIGN KEY (`FloorLocationID`)
    REFERENCES `StartupMigrationEngine`.`FloorLocations` (`FloorLocationID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_OtherHardwareHistory_Racks1`
    FOREIGN KEY (`RackID`)
    REFERENCES `StartupMigrationEngine`.`Racks` (`RackID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_OtherHardwareHistory_Racks2`
    FOREIGN KEY (`TargetRackID`)
    REFERENCES `StartupMigrationEngine`.`Racks` (`RackID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_OtherHardwareHistory_FloorLocations2`
    FOREIGN KEY (`TargetFloorLocationID`)
    REFERENCES `StartupMigrationEngine`.`FloorLocations` (`FloorLocationID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_OtherHardwareHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_OtherHardwareHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_OtherHardwareHistory_TemplateUploads`
    FOREIGN KEY (`TemplateUploadID`)
    REFERENCES `StartupMigrationEngine`.`TemplateUploads` (`TemplateUploadID`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;



-- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_OtherHardware_INSERT`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_OtherHardware_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_OtherHardware_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`OtherHardwares`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`OtherHardwareHistory`(`VersionNumber`,`OtherHardwareID`,`OtherHardwareName`,`OtherHardwareTypeID`,`DiscoveryStateID`,`MigrationScopeID`,`CurrentDispositionID`,`TargetDisposition`,`MoveGroupID`,`RackID`,`TargetRackID`,`FloorLocationID`,`TargetFloorLocationID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.OtherHardwareID,NEW.OtherHardwareName,NEW.OtherHardwareTypeID,NEW.DiscoveryStateID,NEW.MigrationScopeID,NEW.CurrentDispositionID,NEW.TargetDisposition,NEW.MoveGroupID,NEW.RackID,NEW.TargetRackID,NEW.FloorLocationID,NEW.TargetFloorLocationID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

  INSERT INTO `StartupMigrationEngine`.`AssetMigrationScope`(`AssetID`,`AssetType`,`MigrationScopeId`,`MigrationScopeSignOffFlag`)
  VALUES(NEW.OtherHardwareID,'OtherHardware',NEW.MigrationScopeID,0);

END$$
DELIMITER ;

-- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_OtherHardware_UPDATE`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_OtherHardware_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_OtherHardware_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`OtherHardwares`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`OtherHardwareHistory` where OtherHardwareID = NEW.OtherHardwareID);
   INSERT INTO `StartupMigrationEngine`.`OtherHardwareHistory`(`VersionNumber`,`OtherHardwareID`,`OtherHardwareName`,`OtherHardwareTypeID`,`DiscoveryStateID`,`MigrationScopeID`,`CurrentDispositionID`,`TargetDisposition`,`MoveGroupID`,`RackID`,`TargetRackID`,`FloorLocationID`,`TargetFloorLocationID`,`TemplateUploadID`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
   VALUES(@VersionNumber,NEW.OtherHardwareID,NEW.OtherHardwareName,NEW.OtherHardwareTypeID,NEW.DiscoveryStateID,NEW.MigrationScopeID,NEW.CurrentDispositionID,NEW.TargetDisposition,NEW.MoveGroupID,NEW.RackID,NEW.TargetRackID,NEW.FloorLocationID,NEW.TargetFloorLocationID,NEW.TemplateUploadID,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
   UPDATE `StartupMigrationEngine`.`AssetMigrationScope` SET MigrationScopeId = NEW.MigrationScopeID WHERE AssetID = NEW.OtherHardwareID AND AssetType = 'OtherHardware';
   
END$$
DELIMITER ;

-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`AssetTypeHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`AssetTypeHistory` (
  `AssetTypeHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `AssetTypeID` INT NOT NULL,
  `AssetType` VARCHAR(100) NOT NULL,
  `AssetTypeName` VARCHAR(100) NULL,
  `AssetTemplateFileName` VARCHAR(100) NULL,
  `QuestionnaireFileName` VARCHAR(100) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT(11) NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT(11) NOT NULL,
  PRIMARY KEY (`AssetTypeHistoryID`),
  INDEX `fk_AssetTypeHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_AssetTypeHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_AssetTypeHistory_AssetTypeID_idx` (`AssetTypeID` ASC),
  CONSTRAINT `fk_AssetTypeHistory_AssetTypeID`
    FOREIGN KEY (`AssetTypeID`)
    REFERENCES `StartupMigrationEngine`.`AssetTypes` (`AssetTypeID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_AssetTypeHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_AssetTypeHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
 ) ENGINE = InnoDB;
 
 -- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_AssetType_INSERT`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_AssetType_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_AssetType_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`AssetTypes`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`AssetTypeHistory`(`VersionNumber`,`AssetTypeID`,`AssetType`,`AssetTypeName`,`AssetTemplateFileName`,`QuestionnaireFileName`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.AssetTypeID,NEW.AssetType,NEW.AssetTypeName,NEW.AssetTemplateFileName,NEW.QuestionnaireFileName,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_AssetType_UPDATE`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_AssetType_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_AssetType_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`AssetTypes`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`AssetTypeHistory` where AssetTypeID = NEW.AssetTypeID);
  INSERT INTO `StartupMigrationEngine`.`AssetTypeHistory`(`VersionNumber`,`AssetTypeID`,`AssetType`,`AssetTypeName`,`AssetTemplateFileName`,`QuestionnaireFileName`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(@VersionNumber,NEW.AssetTypeID,NEW.AssetType,NEW.AssetTypeName,NEW.AssetTemplateFileName,NEW.QuestionnaireFileName,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
END$$
DELIMITER ;


-- -----------------------------------------------------
-- Table `StartupMigrationEngine`.`DiscoveryStateHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StartupMigrationEngine`.`DiscoveryStateHistory` (
  `DiscoveryStateHistoryID` INT NOT NULL AUTO_INCREMENT,
  `VersionNumber` INT NOT NULL,
  `DiscoveryStateID` INT NOT NULL,
  `DiscoveryStateName` VARCHAR(100) NOT NULL,
  `OrderNum` INT NULL,
  `FreezeItem` CHAR(1) NULL,
  `CreationDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedByUserID` INT NOT NULL,
  `LastUpdatedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `LastUpdatedByUserID`  INT NOT NULL,
  PRIMARY KEY (`DiscoveryStateHistoryID`),
  INDEX `fk_DiscoveryStateHistory_LastUpdatedByUser_idx` (`LastUpdatedByUserID` ASC),
  INDEX `fk_DiscoveryStateHistory_CreatedByUser_idx` (`CreatedByUserID` ASC),
  INDEX `fk_DiscoveryStateHistory_DiscoveryStateID_idx` (`DiscoveryStateID` ASC),
  CONSTRAINT `fk_DiscoveryStateHistory_DiscoveryStateID`
    FOREIGN KEY (`DiscoveryStateID`)
    REFERENCES `StartupMigrationEngine`.`DiscoveryState` (`DiscoveryStateID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_DiscoveryStateHistory_CreatedByUser`
    FOREIGN KEY (`CreatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,	
  CONSTRAINT `fk_DiscoveryStateHistory_LastUpdatedByUser`
    FOREIGN KEY (`LastUpdatedByUserID`)
    REFERENCES `StartupMigrationEngine`.`Users` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
 ) ENGINE = InnoDB;
 
  -- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_DiscoveryState_INSERT`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_DiscoveryState_INSERT`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_DiscoveryState_INSERT` 
  AFTER INSERT ON `StartupMigrationEngine`.`DiscoveryState`
  FOR EACH ROW 
BEGIN 
  INSERT INTO `StartupMigrationEngine`.`DiscoveryStateHistory`(`VersionNumber`,`DiscoveryStateID`,`DiscoveryStateName`,`OrderNum`,`FreezeItem`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
  VALUES(1,NEW.DiscoveryStateID,NEW.DiscoveryStateName,NEW.OrderNum,NEW.FreezeItem,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);

END$$
DELIMITER ;

-- --------------------------------------------------------------------
-- TRIGGER `StartupMigrationEngine`.`TRIG_DiscoveryState_UPDATE`
-- --------------------------------------------------------------------
DROP TRIGGER IF EXISTS `StartupMigrationEngine`.`TRIG_DiscoveryState_UPDATE`;

DELIMITER $$

CREATE TRIGGER `StartupMigrationEngine`.`TRIG_DiscoveryState_UPDATE` 
  AFTER UPDATE ON `StartupMigrationEngine`.`DiscoveryState`
  FOR EACH ROW 
  BEGIN
SET @VersionNumber = (SELECT COALESCE(MAX(VersionNumber),0)+1 FROM `StartupMigrationEngine`.`DiscoveryStateHistory` where DiscoveryStateID = NEW.DiscoveryStateID);
   INSERT INTO `StartupMigrationEngine`.`DiscoveryStateHistory`(`VersionNumber`,`DiscoveryStateID`,`DiscoveryStateName`,`OrderNum`,`FreezeItem`,`CreationDate`,`CreatedByUserID`,`LastUpdatedDate`,`LastUpdatedByUserID`)
   VALUES(@VersionNumber,NEW.DiscoveryStateID,NEW.DiscoveryStateName,NEW.OrderNum,NEW.FreezeItem,NEW.CreationDate,NEW.CreatedByUserID,NEW.LastUpdatedDate,NEW.LastUpdatedByUserID);
  
END$$
DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
